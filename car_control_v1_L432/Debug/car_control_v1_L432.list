
car_control_v1_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002520  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08002718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ac  2000007c  08002794  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000228  08002794  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010436  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025d6  00000000  00000000  000304e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007f2e  00000000  00000000  00032ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000bd0  00000000  00000000  0003a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000df8  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005da5  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000046b0  00000000  00000000  00042155  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00046805  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002110  00000000  00000000  00046884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000007c 	.word	0x2000007c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002694 	.word	0x08002694

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000080 	.word	0x20000080
 80001c8:	08002694 	.word	0x08002694

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b97a 	b.w	80004d8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	468c      	mov	ip, r1
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	9e08      	ldr	r6, [sp, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d151      	bne.n	80002b0 <__udivmoddi4+0xb4>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d96d      	bls.n	80002ee <__udivmoddi4+0xf2>
 8000212:	fab2 fe82 	clz	lr, r2
 8000216:	f1be 0f00 	cmp.w	lr, #0
 800021a:	d00b      	beq.n	8000234 <__udivmoddi4+0x38>
 800021c:	f1ce 0c20 	rsb	ip, lr, #32
 8000220:	fa01 f50e 	lsl.w	r5, r1, lr
 8000224:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000230:	fa00 f40e 	lsl.w	r4, r0, lr
 8000234:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000238:	0c25      	lsrs	r5, r4, #16
 800023a:	fbbc f8fa 	udiv	r8, ip, sl
 800023e:	fa1f f987 	uxth.w	r9, r7
 8000242:	fb0a cc18 	mls	ip, sl, r8, ip
 8000246:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024a:	fb08 f309 	mul.w	r3, r8, r9
 800024e:	42ab      	cmp	r3, r5
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x6c>
 8000252:	19ed      	adds	r5, r5, r7
 8000254:	f108 32ff 	add.w	r2, r8, #4294967295
 8000258:	f080 8123 	bcs.w	80004a2 <__udivmoddi4+0x2a6>
 800025c:	42ab      	cmp	r3, r5
 800025e:	f240 8120 	bls.w	80004a2 <__udivmoddi4+0x2a6>
 8000262:	f1a8 0802 	sub.w	r8, r8, #2
 8000266:	443d      	add	r5, r7
 8000268:	1aed      	subs	r5, r5, r3
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000270:	fb0a 5510 	mls	r5, sl, r0, r5
 8000274:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000278:	fb00 f909 	mul.w	r9, r0, r9
 800027c:	45a1      	cmp	r9, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x98>
 8000280:	19e4      	adds	r4, r4, r7
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 810a 	bcs.w	800049e <__udivmoddi4+0x2a2>
 800028a:	45a1      	cmp	r9, r4
 800028c:	f240 8107 	bls.w	800049e <__udivmoddi4+0x2a2>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	eba4 0409 	sub.w	r4, r4, r9
 8000298:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d061      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002a2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a6:	2300      	movs	r3, #0
 80002a8:	6034      	str	r4, [r6, #0]
 80002aa:	6073      	str	r3, [r6, #4]
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0xc8>
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d054      	beq.n	8000362 <__udivmoddi4+0x166>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e886 0021 	stmia.w	r6, {r0, r5}
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	f040 808e 	bne.w	80003ea <__udivmoddi4+0x1ee>
 80002ce:	42ab      	cmp	r3, r5
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xdc>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2d0>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb65 0503 	sbc.w	r5, r5, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	46ac      	mov	ip, r5
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d03f      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002e6:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b912      	cbnz	r2, 80002f6 <__udivmoddi4+0xfa>
 80002f0:	2701      	movs	r7, #1
 80002f2:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f6:	fab7 fe87 	clz	lr, r7
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d134      	bne.n	800036a <__udivmoddi4+0x16e>
 8000300:	1beb      	subs	r3, r5, r7
 8000302:	0c3a      	lsrs	r2, r7, #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb3 f8f2 	udiv	r8, r3, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	fb02 3318 	mls	r3, r2, r8, r3
 8000314:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000318:	fb0c f308 	mul.w	r3, ip, r8
 800031c:	42ab      	cmp	r3, r5
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x134>
 8000320:	19ed      	adds	r5, r5, r7
 8000322:	f108 30ff 	add.w	r0, r8, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x132>
 8000328:	42ab      	cmp	r3, r5
 800032a:	f200 80d1 	bhi.w	80004d0 <__udivmoddi4+0x2d4>
 800032e:	4680      	mov	r8, r0
 8000330:	1aed      	subs	r5, r5, r3
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb5 f0f2 	udiv	r0, r5, r2
 8000338:	fb02 5510 	mls	r5, r2, r0, r5
 800033c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000340:	fb0c fc00 	mul.w	ip, ip, r0
 8000344:	45a4      	cmp	ip, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x15c>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x15a>
 8000350:	45a4      	cmp	ip, r4
 8000352:	f200 80b8 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 040c 	sub.w	r4, r4, ip
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	e79d      	b.n	800029e <__udivmoddi4+0xa2>
 8000362:	4631      	mov	r1, r6
 8000364:	4630      	mov	r0, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	f1ce 0420 	rsb	r4, lr, #32
 800036e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000372:	fa07 f70e 	lsl.w	r7, r7, lr
 8000376:	fa20 f804 	lsr.w	r8, r0, r4
 800037a:	0c3a      	lsrs	r2, r7, #16
 800037c:	fa25 f404 	lsr.w	r4, r5, r4
 8000380:	ea48 0803 	orr.w	r8, r8, r3
 8000384:	fbb4 f1f2 	udiv	r1, r4, r2
 8000388:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800038c:	fb02 4411 	mls	r4, r2, r1, r4
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000398:	fb01 f30c 	mul.w	r3, r1, ip
 800039c:	42ab      	cmp	r3, r5
 800039e:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1bc>
 80003a4:	19ed      	adds	r5, r5, r7
 80003a6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003aa:	f080 808a 	bcs.w	80004c2 <__udivmoddi4+0x2c6>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	f240 8087 	bls.w	80004c2 <__udivmoddi4+0x2c6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	1aeb      	subs	r3, r5, r3
 80003ba:	fa1f f588 	uxth.w	r5, r8
 80003be:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c2:	fb02 3310 	mls	r3, r2, r0, r3
 80003c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ca:	fb00 f30c 	mul.w	r3, r0, ip
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1e6>
 80003d2:	19ed      	adds	r5, r5, r7
 80003d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d8:	d26f      	bcs.n	80004ba <__udivmoddi4+0x2be>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d96d      	bls.n	80004ba <__udivmoddi4+0x2be>
 80003de:	3802      	subs	r0, #2
 80003e0:	443d      	add	r5, r7
 80003e2:	1aeb      	subs	r3, r5, r3
 80003e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e8:	e78f      	b.n	800030a <__udivmoddi4+0x10e>
 80003ea:	f1c1 0720 	rsb	r7, r1, #32
 80003ee:	fa22 f807 	lsr.w	r8, r2, r7
 80003f2:	408b      	lsls	r3, r1
 80003f4:	fa05 f401 	lsl.w	r4, r5, r1
 80003f8:	ea48 0303 	orr.w	r3, r8, r3
 80003fc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000404:	40fd      	lsrs	r5, r7
 8000406:	ea4e 0e04 	orr.w	lr, lr, r4
 800040a:	fbb5 f9fc 	udiv	r9, r5, ip
 800040e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000412:	fb0c 5519 	mls	r5, ip, r9, r5
 8000416:	fa1f f883 	uxth.w	r8, r3
 800041a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041e:	fb09 f408 	mul.w	r4, r9, r8
 8000422:	42ac      	cmp	r4, r5
 8000424:	fa02 f201 	lsl.w	r2, r2, r1
 8000428:	fa00 fa01 	lsl.w	sl, r0, r1
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x244>
 800042e:	18ed      	adds	r5, r5, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d243      	bcs.n	80004be <__udivmoddi4+0x2c2>
 8000436:	42ac      	cmp	r4, r5
 8000438:	d941      	bls.n	80004be <__udivmoddi4+0x2c2>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	441d      	add	r5, r3
 8000440:	1b2d      	subs	r5, r5, r4
 8000442:	fa1f fe8e 	uxth.w	lr, lr
 8000446:	fbb5 f0fc 	udiv	r0, r5, ip
 800044a:	fb0c 5510 	mls	r5, ip, r0, r5
 800044e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45a0      	cmp	r8, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26e>
 800045a:	18e4      	adds	r4, r4, r3
 800045c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000460:	d229      	bcs.n	80004b6 <__udivmoddi4+0x2ba>
 8000462:	45a0      	cmp	r8, r4
 8000464:	d927      	bls.n	80004b6 <__udivmoddi4+0x2ba>
 8000466:	3802      	subs	r0, #2
 8000468:	441c      	add	r4, r3
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454c      	cmp	r4, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	464d      	mov	r5, r9
 800047c:	d315      	bcc.n	80004aa <__udivmoddi4+0x2ae>
 800047e:	d012      	beq.n	80004a6 <__udivmoddi4+0x2aa>
 8000480:	b156      	cbz	r6, 8000498 <__udivmoddi4+0x29c>
 8000482:	ebba 030e 	subs.w	r3, sl, lr
 8000486:	eb64 0405 	sbc.w	r4, r4, r5
 800048a:	fa04 f707 	lsl.w	r7, r4, r7
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431f      	orrs	r7, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	6037      	str	r7, [r6, #0]
 8000496:	6074      	str	r4, [r6, #4]
 8000498:	2100      	movs	r1, #0
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	4618      	mov	r0, r3
 80004a0:	e6f8      	b.n	8000294 <__udivmoddi4+0x98>
 80004a2:	4690      	mov	r8, r2
 80004a4:	e6e0      	b.n	8000268 <__udivmoddi4+0x6c>
 80004a6:	45c2      	cmp	sl, r8
 80004a8:	d2ea      	bcs.n	8000480 <__udivmoddi4+0x284>
 80004aa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ae:	eb69 0503 	sbc.w	r5, r9, r3
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7e4      	b.n	8000480 <__udivmoddi4+0x284>
 80004b6:	4628      	mov	r0, r5
 80004b8:	e7d7      	b.n	800046a <__udivmoddi4+0x26e>
 80004ba:	4640      	mov	r0, r8
 80004bc:	e791      	b.n	80003e2 <__udivmoddi4+0x1e6>
 80004be:	4681      	mov	r9, r0
 80004c0:	e7be      	b.n	8000440 <__udivmoddi4+0x244>
 80004c2:	4601      	mov	r1, r0
 80004c4:	e778      	b.n	80003b8 <__udivmoddi4+0x1bc>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	e745      	b.n	8000358 <__udivmoddi4+0x15c>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xe6>
 80004d0:	f1a8 0802 	sub.w	r8, r8, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	e72b      	b.n	8000330 <__udivmoddi4+0x134>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_InitTick+0x2c>)
{
 80004e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ec:	f000 f87e 	bl	80005ec <HAL_SYSTICK_Config>
 80004f0:	4604      	mov	r4, r0
 80004f2:	b938      	cbnz	r0, 8000504 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004f4:	4602      	mov	r2, r0
 80004f6:	4629      	mov	r1, r5
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f000 f836 	bl	800056c <HAL_NVIC_SetPriority>
 8000500:	4620      	mov	r0, r4
 8000502:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000504:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000506:	bd38      	pop	{r3, r4, r5, pc}
 8000508:	20000078 	.word	0x20000078

0800050c <HAL_Init>:
{
 800050c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050e:	2003      	movs	r0, #3
 8000510:	f000 f81a 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ffe1 	bl	80004dc <HAL_InitTick>
 800051a:	4604      	mov	r4, r0
 800051c:	b918      	cbnz	r0, 8000526 <HAL_Init+0x1a>
    HAL_MspInit();
 800051e:	f001 ff53 	bl	80023c8 <HAL_MspInit>
}
 8000522:	4620      	mov	r0, r4
 8000524:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000526:	2401      	movs	r4, #1
 8000528:	e7fb      	b.n	8000522 <HAL_Init+0x16>
	...

0800052c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800052c:	4a02      	ldr	r2, [pc, #8]	; (8000538 <HAL_IncTick+0xc>)
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	200000a0 	.word	0x200000a0

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200000a0 	.word	0x200000a0

08000548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800054a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000550:	041b      	lsls	r3, r3, #16
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000558:	0200      	lsls	r0, r0, #8
 800055a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000562:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000564:	60d3      	str	r3, [r2, #12]
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	68dc      	ldr	r4, [r3, #12]
 8000572:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000576:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057c:	2b04      	cmp	r3, #4
 800057e:	bf28      	it	cs
 8000580:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	f04f 0501 	mov.w	r5, #1
 8000588:	fa05 f303 	lsl.w	r3, r5, r3
 800058c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000590:	bf8c      	ite	hi
 8000592:	3c03      	subhi	r4, #3
 8000594:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000596:	4019      	ands	r1, r3
 8000598:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059a:	fa05 f404 	lsl.w	r4, r5, r4
 800059e:	3c01      	subs	r4, #1
 80005a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	ea42 0201 	orr.w	r2, r2, r1
 80005a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfaf      	iteee	ge
 80005ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	f000 000f 	andlt.w	r0, r0, #15
 80005b6:	4b06      	ldrlt	r3, [pc, #24]	; (80005d0 <HAL_NVIC_SetPriority+0x64>)
 80005b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	bfa5      	ittet	ge
 80005bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000ed14 	.word	0xe000ed14

080005d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005d4:	0942      	lsrs	r2, r0, #5
 80005d6:	2301      	movs	r3, #1
 80005d8:	f000 001f 	and.w	r0, r0, #31
 80005dc:	fa03 f000 	lsl.w	r0, r3, r0
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_NVIC_EnableIRQ+0x14>)
 80005e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	3801      	subs	r0, #1
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d20a      	bcs.n	800060a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	21f0      	movs	r1, #240	; 0xf0
 80005fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800060a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000618:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800061c:	2a02      	cmp	r2, #2
{
 800061e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000620:	d003      	beq.n	800062a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000622:	2204      	movs	r2, #4
 8000624:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000626:	2001      	movs	r0, #1
 8000628:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800062a:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800062c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800062e:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000630:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000632:	f021 010e 	bic.w	r1, r1, #14
 8000636:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000638:	6811      	ldr	r1, [r2, #0]
 800063a:	f021 0101 	bic.w	r1, r1, #1
 800063e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000642:	2101      	movs	r1, #1
 8000644:	f002 021c 	and.w	r2, r2, #28
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800064e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000650:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000654:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000658:	b113      	cbz	r3, 8000660 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 800065a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800065c:	4620      	mov	r0, r4
 800065e:	bd10      	pop	{r4, pc}
 8000660:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8000662:	bd10      	pop	{r4, pc}

08000664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000668:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80007c8 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000670:	4a53      	ldr	r2, [pc, #332]	; (80007c0 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000672:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000674:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000678:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800067a:	9c01      	ldr	r4, [sp, #4]
 800067c:	40dc      	lsrs	r4, r3
 800067e:	d102      	bne.n	8000686 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000680:	b005      	add	sp, #20
 8000682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000686:	2401      	movs	r4, #1
 8000688:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 800068c:	9c01      	ldr	r4, [sp, #4]
 800068e:	ea14 050a 	ands.w	r5, r4, sl
 8000692:	f000 808f 	beq.w	80007b4 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000696:	684c      	ldr	r4, [r1, #4]
 8000698:	f024 0b10 	bic.w	fp, r4, #16
 800069c:	f1bb 0f02 	cmp.w	fp, #2
 80006a0:	d111      	bne.n	80006c6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 80006a2:	08df      	lsrs	r7, r3, #3
 80006a4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006a8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80006ac:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006ae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80006b2:	fa09 fc0e 	lsl.w	ip, r9, lr
 80006b6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006ba:	690e      	ldr	r6, [r1, #16]
 80006bc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006c0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006c4:	623e      	str	r6, [r7, #32]
 80006c6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006ca:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80006cc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006ce:	fa07 f70c 	lsl.w	r7, r7, ip
 80006d2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006d8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006da:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006de:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006e2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006ea:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	d811      	bhi.n	8000712 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80006ee:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006f0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006f4:	68ce      	ldr	r6, [r1, #12]
 80006f6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80006fa:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80006fe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000700:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000702:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000706:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800070a:	409e      	lsls	r6, r3
 800070c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000710:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000712:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000714:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000716:	688e      	ldr	r6, [r1, #8]
 8000718:	fa06 f60c 	lsl.w	r6, r6, ip
 800071c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800071e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000720:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000722:	d547      	bpl.n	80007b4 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000728:	f046 0601 	orr.w	r6, r6, #1
 800072c:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8000730:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000734:	f023 0703 	bic.w	r7, r3, #3
 8000738:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800073c:	f006 0601 	and.w	r6, r6, #1
 8000740:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000744:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000746:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800074c:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800074e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000752:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000756:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800075a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800075e:	d02b      	beq.n	80007b8 <HAL_GPIO_Init+0x154>
 8000760:	4e18      	ldr	r6, [pc, #96]	; (80007c4 <HAL_GPIO_Init+0x160>)
 8000762:	42b0      	cmp	r0, r6
 8000764:	d02a      	beq.n	80007bc <HAL_GPIO_Init+0x158>
 8000766:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800076a:	42b0      	cmp	r0, r6
 800076c:	bf14      	ite	ne
 800076e:	2607      	movne	r6, #7
 8000770:	2602      	moveq	r6, #2
 8000772:	fa06 f60e 	lsl.w	r6, r6, lr
 8000776:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800077a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800077c:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800077e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000780:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000784:	bf0c      	ite	eq
 8000786:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000788:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800078a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 800078c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000792:	bf0c      	ite	eq
 8000794:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000796:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000798:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800079a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800079c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80007a0:	bf0c      	ite	eq
 80007a2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80007a4:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80007a6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80007a8:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007aa:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80007ac:	bf54      	ite	pl
 80007ae:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80007b0:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80007b2:	60d6      	str	r6, [r2, #12]
    position++;
 80007b4:	3301      	adds	r3, #1
 80007b6:	e760      	b.n	800067a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007b8:	2600      	movs	r6, #0
 80007ba:	e7da      	b.n	8000772 <HAL_GPIO_Init+0x10e>
 80007bc:	2601      	movs	r6, #1
 80007be:	e7d8      	b.n	8000772 <HAL_GPIO_Init+0x10e>
 80007c0:	40010400 	.word	0x40010400
 80007c4:	48000400 	.word	0x48000400
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007cc:	b10a      	cbz	r2, 80007d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007ce:	6181      	str	r1, [r0, #24]
 80007d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007d2:	6281      	str	r1, [r0, #40]	; 0x28
 80007d4:	4770      	bx	lr
	...

080007d8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007d8:	4a02      	ldr	r2, [pc, #8]	; (80007e4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80007da:	6813      	ldr	r3, [r2, #0]
 80007dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4770      	bx	lr
 80007e4:	40007000 	.word	0x40007000

080007e8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <HAL_PWREx_GetVoltageRange+0xc>)
 80007ea:	6818      	ldr	r0, [r3, #0]
#endif
}
 80007ec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40007000 	.word	0x40007000

080007f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007fa:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000800:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000804:	d11c      	bne.n	8000840 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000806:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800080a:	d015      	beq.n	8000838 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000816:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <HAL_PWREx_ControlVoltageScaling+0x64>)
 800081a:	6811      	ldr	r1, [r2, #0]
 800081c:	2232      	movs	r2, #50	; 0x32
 800081e:	434a      	muls	r2, r1
 8000820:	490f      	ldr	r1, [pc, #60]	; (8000860 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000822:	fbb2 f2f1 	udiv	r2, r2, r1
 8000826:	4619      	mov	r1, r3
 8000828:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800082a:	6958      	ldr	r0, [r3, #20]
 800082c:	0540      	lsls	r0, r0, #21
 800082e:	d500      	bpl.n	8000832 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000830:	b922      	cbnz	r2, 800083c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000832:	694b      	ldr	r3, [r1, #20]
 8000834:	055b      	lsls	r3, r3, #21
 8000836:	d40d      	bmi.n	8000854 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000838:	2000      	movs	r0, #0
 800083a:	4770      	bx	lr
        wait_loop_index--;
 800083c:	3a01      	subs	r2, #1
 800083e:	e7f4      	b.n	800082a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000840:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000844:	bf1f      	itttt	ne
 8000846:	681a      	ldrne	r2, [r3, #0]
 8000848:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800084c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000850:	601a      	strne	r2, [r3, #0]
 8000852:	e7f1      	b.n	8000838 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000854:	2003      	movs	r0, #3
}
 8000856:	4770      	bx	lr
 8000858:	40007000 	.word	0x40007000
 800085c:	20000078 	.word	0x20000078
 8000860:	000f4240 	.word	0x000f4240

08000864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000864:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000866:	4d1e      	ldr	r5, [pc, #120]	; (80008e0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000868:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800086a:	00da      	lsls	r2, r3, #3
{
 800086c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800086e:	d518      	bpl.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000870:	f7ff ffba 	bl	80007e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000874:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000878:	d123      	bne.n	80008c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800087a:	2c80      	cmp	r4, #128	; 0x80
 800087c:	d929      	bls.n	80008d2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800087e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000880:	bf8c      	ite	hi
 8000882:	2002      	movhi	r0, #2
 8000884:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	f023 0307 	bic.w	r3, r3, #7
 800088e:	4303      	orrs	r3, r0
 8000890:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000892:	6813      	ldr	r3, [r2, #0]
 8000894:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000898:	1a18      	subs	r0, r3, r0
 800089a:	bf18      	it	ne
 800089c:	2001      	movne	r0, #1
 800089e:	b003      	add	sp, #12
 80008a0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	65ab      	str	r3, [r5, #88]	; 0x58
 80008aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80008b4:	f7ff ff98 	bl	80007e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80008b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008be:	65ab      	str	r3, [r5, #88]	; 0x58
 80008c0:	e7d8      	b.n	8000874 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80008c2:	2c80      	cmp	r4, #128	; 0x80
 80008c4:	d807      	bhi.n	80008d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80008c6:	d008      	beq.n	80008da <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80008c8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80008cc:	4258      	negs	r0, r3
 80008ce:	4158      	adcs	r0, r3
 80008d0:	e7d9      	b.n	8000886 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80008d2:	2000      	movs	r0, #0
 80008d4:	e7d7      	b.n	8000886 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80008d6:	2003      	movs	r0, #3
 80008d8:	e7d5      	b.n	8000886 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008da:	2002      	movs	r0, #2
 80008dc:	e7d3      	b.n	8000886 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <HAL_RCC_GetSysClockFreq+0x98>)
 80008ea:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008ec:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80008ee:	f012 020c 	ands.w	r2, r2, #12
 80008f2:	d005      	beq.n	8000900 <HAL_RCC_GetSysClockFreq+0x18>
 80008f4:	2a0c      	cmp	r2, #12
 80008f6:	d115      	bne.n	8000924 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008f8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80008fc:	2901      	cmp	r1, #1
 80008fe:	d118      	bne.n	8000932 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000900:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000902:	4820      	ldr	r0, [pc, #128]	; (8000984 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000904:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000906:	bf55      	itete	pl
 8000908:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800090c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800090e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000912:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000916:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800091a:	b382      	cbz	r2, 800097e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800091c:	2a0c      	cmp	r2, #12
 800091e:	d009      	beq.n	8000934 <HAL_RCC_GetSysClockFreq+0x4c>
 8000920:	2000      	movs	r0, #0
  return sysclockfreq;
 8000922:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000924:	2a04      	cmp	r2, #4
 8000926:	d029      	beq.n	800097c <HAL_RCC_GetSysClockFreq+0x94>
 8000928:	2a08      	cmp	r2, #8
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <HAL_RCC_GetSysClockFreq+0xa0>)
 800092c:	bf18      	it	ne
 800092e:	2000      	movne	r0, #0
 8000930:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000932:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000934:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000936:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000938:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800093c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000940:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000942:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000946:	d005      	beq.n	8000954 <HAL_RCC_GetSysClockFreq+0x6c>
 8000948:	2903      	cmp	r1, #3
 800094a:	d012      	beq.n	8000972 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800094c:	68d9      	ldr	r1, [r3, #12]
 800094e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000952:	e003      	b.n	800095c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000954:	68d9      	ldr	r1, [r3, #12]
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000958:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800095c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800095e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000962:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000966:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000968:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800096a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800096c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000970:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000972:	68d9      	ldr	r1, [r3, #12]
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000976:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800097a:	e7ef      	b.n	800095c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	080026d8 	.word	0x080026d8
 8000988:	007a1200 	.word	0x007a1200
 800098c:	00f42400 	.word	0x00f42400

08000990 <HAL_RCC_OscConfig>:
{
 8000990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000994:	4605      	mov	r5, r0
 8000996:	b908      	cbnz	r0, 800099c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000998:	2001      	movs	r0, #1
 800099a:	e046      	b.n	8000a2a <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800099c:	4ca8      	ldr	r4, [pc, #672]	; (8000c40 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800099e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009a0:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009a2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009a4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009a6:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009aa:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009ae:	d572      	bpl.n	8000a96 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80009b0:	b11e      	cbz	r6, 80009ba <HAL_RCC_OscConfig+0x2a>
 80009b2:	2e0c      	cmp	r6, #12
 80009b4:	d151      	bne.n	8000a5a <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80009b6:	2f01      	cmp	r7, #1
 80009b8:	d14f      	bne.n	8000a5a <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	0798      	lsls	r0, r3, #30
 80009be:	d502      	bpl.n	80009c6 <HAL_RCC_OscConfig+0x36>
 80009c0:	69ab      	ldr	r3, [r5, #24]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0e8      	beq.n	8000998 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	6a28      	ldr	r0, [r5, #32]
 80009ca:	0719      	lsls	r1, r3, #28
 80009cc:	bf56      	itet	pl
 80009ce:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80009d2:	6823      	ldrmi	r3, [r4, #0]
 80009d4:	091b      	lsrpl	r3, r3, #4
 80009d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009da:	4283      	cmp	r3, r0
 80009dc:	d228      	bcs.n	8000a30 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009de:	f7ff ff41 	bl	8000864 <RCC_SetFlashLatencyFromMSIRange>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d1d8      	bne.n	8000998 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6023      	str	r3, [r4, #0]
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	6a2a      	ldr	r2, [r5, #32]
 80009f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009f6:	4313      	orrs	r3, r2
 80009f8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009fa:	6863      	ldr	r3, [r4, #4]
 80009fc:	69ea      	ldr	r2, [r5, #28]
 80009fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a06:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a08:	f7ff ff6e 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
 8000a0c:	68a3      	ldr	r3, [r4, #8]
 8000a0e:	4a8d      	ldr	r2, [pc, #564]	; (8000c44 <HAL_RCC_OscConfig+0x2b4>)
 8000a10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	40d8      	lsrs	r0, r3
 8000a1c:	4b8a      	ldr	r3, [pc, #552]	; (8000c48 <HAL_RCC_OscConfig+0x2b8>)
 8000a1e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fd5b 	bl	80004dc <HAL_InitTick>
        if(status != HAL_OK)
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d035      	beq.n	8000a96 <HAL_RCC_OscConfig+0x106>
}
 8000a2a:	b003      	add	sp, #12
 8000a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6023      	str	r3, [r4, #0]
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a3e:	4303      	orrs	r3, r0
 8000a40:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	69ea      	ldr	r2, [r5, #28]
 8000a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a4e:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a50:	f7ff ff08 	bl	8000864 <RCC_SetFlashLatencyFromMSIRange>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d0d7      	beq.n	8000a08 <HAL_RCC_OscConfig+0x78>
 8000a58:	e79e      	b.n	8000998 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a5a:	69ab      	ldr	r3, [r5, #24]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d03a      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a68:	f7ff fd68 	bl	800053c <HAL_GetTick>
 8000a6c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	079a      	lsls	r2, r3, #30
 8000a72:	d528      	bpl.n	8000ac6 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6023      	str	r3, [r4, #0]
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	6a2a      	ldr	r2, [r5, #32]
 8000a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a84:	4313      	orrs	r3, r2
 8000a86:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	69ea      	ldr	r2, [r5, #28]
 8000a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a94:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	07d8      	lsls	r0, r3, #31
 8000a9a:	d42d      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	0799      	lsls	r1, r3, #30
 8000aa0:	d46b      	bmi.n	8000b7a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	0718      	lsls	r0, r3, #28
 8000aa6:	f100 80a0 	bmi.w	8000bea <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	0759      	lsls	r1, r3, #29
 8000aae:	f100 80cd 	bmi.w	8000c4c <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	0699      	lsls	r1, r3, #26
 8000ab6:	f100 8136 	bmi.w	8000d26 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000aba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f040 815c 	bne.w	8000d7a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	e7b1      	b.n	8000a2a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ac6:	f7ff fd39 	bl	800053c <HAL_GetTick>
 8000aca:	eba0 0008 	sub.w	r0, r0, r8
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9cd      	bls.n	8000a6e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	e7a9      	b.n	8000a2a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	f023 0301 	bic.w	r3, r3, #1
 8000adc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ade:	f7ff fd2d 	bl	800053c <HAL_GetTick>
 8000ae2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	079b      	lsls	r3, r3, #30
 8000ae8:	d5d5      	bpl.n	8000a96 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000aea:	f7ff fd27 	bl	800053c <HAL_GetTick>
 8000aee:	eba0 0008 	sub.w	r0, r0, r8
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9f6      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x154>
 8000af6:	e7ec      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000af8:	2e08      	cmp	r6, #8
 8000afa:	d003      	beq.n	8000b04 <HAL_RCC_OscConfig+0x174>
 8000afc:	2e0c      	cmp	r6, #12
 8000afe:	d108      	bne.n	8000b12 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000b00:	2f03      	cmp	r7, #3
 8000b02:	d106      	bne.n	8000b12 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	039a      	lsls	r2, r3, #14
 8000b08:	d5c8      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x10c>
 8000b0a:	686b      	ldr	r3, [r5, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1c5      	bne.n	8000a9c <HAL_RCC_OscConfig+0x10c>
 8000b10:	e742      	b.n	8000998 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b12:	686b      	ldr	r3, [r5, #4]
 8000b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b18:	d110      	bne.n	8000b3c <HAL_RCC_OscConfig+0x1ac>
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b22:	f7ff fd0b 	bl	800053c <HAL_GetTick>
 8000b26:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	039b      	lsls	r3, r3, #14
 8000b2c:	d4b6      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fd05 	bl	800053c <HAL_GetTick>
 8000b32:	eba0 0008 	sub.w	r0, r0, r8
 8000b36:	2864      	cmp	r0, #100	; 0x64
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x198>
 8000b3a:	e7ca      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b40:	d104      	bne.n	8000b4c <HAL_RCC_OscConfig+0x1bc>
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b48:	6023      	str	r3, [r4, #0]
 8000b4a:	e7e6      	b.n	8000b1a <HAL_RCC_OscConfig+0x18a>
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b52:	6022      	str	r2, [r4, #0]
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b5a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1e0      	bne.n	8000b22 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8000b60:	f7ff fcec 	bl	800053c <HAL_GetTick>
 8000b64:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	0398      	lsls	r0, r3, #14
 8000b6a:	d597      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b6c:	f7ff fce6 	bl	800053c <HAL_GetTick>
 8000b70:	eba0 0008 	sub.w	r0, r0, r8
 8000b74:	2864      	cmp	r0, #100	; 0x64
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x1d6>
 8000b78:	e7ab      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000b7a:	2e04      	cmp	r6, #4
 8000b7c:	d003      	beq.n	8000b86 <HAL_RCC_OscConfig+0x1f6>
 8000b7e:	2e0c      	cmp	r6, #12
 8000b80:	d110      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000b82:	2f02      	cmp	r7, #2
 8000b84:	d10e      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	0559      	lsls	r1, r3, #21
 8000b8a:	d503      	bpl.n	8000b94 <HAL_RCC_OscConfig+0x204>
 8000b8c:	68eb      	ldr	r3, [r5, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f43f af02 	beq.w	8000998 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b94:	6863      	ldr	r3, [r4, #4]
 8000b96:	692a      	ldr	r2, [r5, #16]
 8000b98:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000b9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ba0:	6063      	str	r3, [r4, #4]
 8000ba2:	e77e      	b.n	8000aa2 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ba4:	68eb      	ldr	r3, [r5, #12]
 8000ba6:	b17b      	cbz	r3, 8000bc8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcc4 	bl	800053c <HAL_GetTick>
 8000bb4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	055a      	lsls	r2, r3, #21
 8000bba:	d4eb      	bmi.n	8000b94 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bbc:	f7ff fcbe 	bl	800053c <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9f7      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x226>
 8000bc6:	e784      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fcb4 	bl	800053c <HAL_GetTick>
 8000bd4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	055b      	lsls	r3, r3, #21
 8000bda:	f57f af62 	bpl.w	8000aa2 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bde:	f7ff fcad 	bl	800053c <HAL_GetTick>
 8000be2:	1bc0      	subs	r0, r0, r7
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d9f6      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x246>
 8000be8:	e773      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bea:	696b      	ldr	r3, [r5, #20]
 8000bec:	b19b      	cbz	r3, 8000c16 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8000bee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bfa:	f7ff fc9f 	bl	800053c <HAL_GetTick>
 8000bfe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c04:	079a      	lsls	r2, r3, #30
 8000c06:	f53f af50 	bmi.w	8000aaa <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fc97 	bl	800053c <HAL_GetTick>
 8000c0e:	1bc0      	subs	r0, r0, r7
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f5      	bls.n	8000c00 <HAL_RCC_OscConfig+0x270>
 8000c14:	e75d      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8000c16:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c1a:	f023 0301 	bic.w	r3, r3, #1
 8000c1e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c22:	f7ff fc8b 	bl	800053c <HAL_GetTick>
 8000c26:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c2c:	079b      	lsls	r3, r3, #30
 8000c2e:	f57f af3c 	bpl.w	8000aaa <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c32:	f7ff fc83 	bl	800053c <HAL_GetTick>
 8000c36:	1bc0      	subs	r0, r0, r7
 8000c38:	2802      	cmp	r0, #2
 8000c3a:	d9f5      	bls.n	8000c28 <HAL_RCC_OscConfig+0x298>
 8000c3c:	e749      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	080026bd 	.word	0x080026bd
 8000c48:	20000078 	.word	0x20000078
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c4e:	00d8      	lsls	r0, r3, #3
 8000c50:	d429      	bmi.n	8000ca6 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c64:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c68:	4f71      	ldr	r7, [pc, #452]	; (8000e30 <HAL_RCC_OscConfig+0x4a0>)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	05d9      	lsls	r1, r3, #23
 8000c6e:	d51d      	bpl.n	8000cac <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c70:	68ab      	ldr	r3, [r5, #8]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d12b      	bne.n	8000cce <HAL_RCC_OscConfig+0x33e>
 8000c76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c82:	f7ff fc5b 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c86:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c8a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c90:	079b      	lsls	r3, r3, #30
 8000c92:	d542      	bpl.n	8000d1a <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8000c94:	f1b8 0f00 	cmp.w	r8, #0
 8000c98:	f43f af0b 	beq.w	8000ab2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ca4:	e705      	b.n	8000ab2 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8000ca6:	f04f 0800 	mov.w	r8, #0
 8000caa:	e7dd      	b.n	8000c68 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000cb4:	f7ff fc42 	bl	800053c <HAL_GetTick>
 8000cb8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	05da      	lsls	r2, r3, #23
 8000cbe:	d4d7      	bmi.n	8000c70 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc0:	f7ff fc3c 	bl	800053c <HAL_GetTick>
 8000cc4:	eba0 0009 	sub.w	r0, r0, r9
 8000cc8:	2802      	cmp	r0, #2
 8000cca:	d9f6      	bls.n	8000cba <HAL_RCC_OscConfig+0x32a>
 8000ccc:	e701      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d106      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x350>
 8000cd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000cde:	e7ca      	b.n	8000c76 <HAL_RCC_OscConfig+0x2e6>
 8000ce0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000cec:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cf0:	f022 0204 	bic.w	r2, r2, #4
 8000cf4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1c2      	bne.n	8000c82 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fc1e 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d04:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d0a:	0798      	lsls	r0, r3, #30
 8000d0c:	d5c2      	bpl.n	8000c94 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0e:	f7ff fc15 	bl	800053c <HAL_GetTick>
 8000d12:	1bc0      	subs	r0, r0, r7
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d9f6      	bls.n	8000d06 <HAL_RCC_OscConfig+0x376>
 8000d18:	e6db      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1a:	f7ff fc0f 	bl	800053c <HAL_GetTick>
 8000d1e:	1bc0      	subs	r0, r0, r7
 8000d20:	4548      	cmp	r0, r9
 8000d22:	d9b3      	bls.n	8000c8c <HAL_RCC_OscConfig+0x2fc>
 8000d24:	e6d5      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d28:	b19b      	cbz	r3, 8000d52 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8000d2a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d36:	f7ff fc01 	bl	800053c <HAL_GetTick>
 8000d3a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d3c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d40:	079a      	lsls	r2, r3, #30
 8000d42:	f53f aeba 	bmi.w	8000aba <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d46:	f7ff fbf9 	bl	800053c <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	2802      	cmp	r0, #2
 8000d4e:	d9f5      	bls.n	8000d3c <HAL_RCC_OscConfig+0x3ac>
 8000d50:	e6bf      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8000d52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d56:	f023 0301 	bic.w	r3, r3, #1
 8000d5a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fbed 	bl	800053c <HAL_GetTick>
 8000d62:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000d64:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d68:	079b      	lsls	r3, r3, #30
 8000d6a:	f57f aea6 	bpl.w	8000aba <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d6e:	f7ff fbe5 	bl	800053c <HAL_GetTick>
 8000d72:	1bc0      	subs	r0, r0, r7
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d9f5      	bls.n	8000d64 <HAL_RCC_OscConfig+0x3d4>
 8000d78:	e6ab      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d7a:	2e0c      	cmp	r6, #12
 8000d7c:	f43f ae0c 	beq.w	8000998 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d80:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d88:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d8a:	d136      	bne.n	8000dfa <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fbd6 	bl	800053c <HAL_GetTick>
 8000d90:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	0198      	lsls	r0, r3, #6
 8000d96:	d42a      	bmi.n	8000dee <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d98:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000d9a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d9c:	06db      	lsls	r3, r3, #27
 8000d9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000da2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000da8:	3a01      	subs	r2, #1
 8000daa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000dae:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000db0:	0852      	lsrs	r2, r2, #1
 8000db2:	3a01      	subs	r2, #1
 8000db4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000db8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000dba:	0852      	lsrs	r2, r2, #1
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000dc2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dca:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dcc:	68e3      	ldr	r3, [r4, #12]
 8000dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fbb2 	bl	800053c <HAL_GetTick>
 8000dd8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	0199      	lsls	r1, r3, #6
 8000dde:	f53f ae70 	bmi.w	8000ac2 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de2:	f7ff fbab 	bl	800053c <HAL_GetTick>
 8000de6:	1b40      	subs	r0, r0, r5
 8000de8:	2802      	cmp	r0, #2
 8000dea:	d9f6      	bls.n	8000dda <HAL_RCC_OscConfig+0x44a>
 8000dec:	e671      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dee:	f7ff fba5 	bl	800053c <HAL_GetTick>
 8000df2:	1b80      	subs	r0, r0, r6
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d9cc      	bls.n	8000d92 <HAL_RCC_OscConfig+0x402>
 8000df8:	e66b      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000dfe:	bf5e      	ittt	pl
 8000e00:	68e3      	ldrpl	r3, [r4, #12]
 8000e02:	f023 0303 	bicpl.w	r3, r3, #3
 8000e06:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000e08:	68e3      	ldr	r3, [r4, #12]
 8000e0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e12:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e14:	f7ff fb92 	bl	800053c <HAL_GetTick>
 8000e18:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	f57f ae50 	bpl.w	8000ac2 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e22:	f7ff fb8b 	bl	800053c <HAL_GetTick>
 8000e26:	1b40      	subs	r0, r0, r5
 8000e28:	2802      	cmp	r0, #2
 8000e2a:	d9f6      	bls.n	8000e1a <HAL_RCC_OscConfig+0x48a>
 8000e2c:	e651      	b.n	8000ad2 <HAL_RCC_OscConfig+0x142>
 8000e2e:	bf00      	nop
 8000e30:	40007000 	.word	0x40007000

08000e34 <HAL_RCC_ClockConfig>:
{
 8000e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e38:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	b910      	cbnz	r0, 8000e44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e44:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_RCC_ClockConfig+0x114>)
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d329      	bcc.n	8000ea4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	07d9      	lsls	r1, r3, #31
 8000e54:	d431      	bmi.n	8000eba <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e56:	6821      	ldr	r1, [r4, #0]
 8000e58:	078a      	lsls	r2, r1, #30
 8000e5a:	d45b      	bmi.n	8000f14 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <HAL_RCC_ClockConfig+0x114>)
 8000e5e:	6813      	ldr	r3, [r2, #0]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d35d      	bcc.n	8000f24 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e68:	f011 0f04 	tst.w	r1, #4
 8000e6c:	4d37      	ldr	r5, [pc, #220]	; (8000f4c <HAL_RCC_ClockConfig+0x118>)
 8000e6e:	d164      	bne.n	8000f3a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e70:	070b      	lsls	r3, r1, #28
 8000e72:	d506      	bpl.n	8000e82 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e74:	68ab      	ldr	r3, [r5, #8]
 8000e76:	6922      	ldr	r2, [r4, #16]
 8000e78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e80:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e82:	f7ff fd31 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
 8000e86:	68ab      	ldr	r3, [r5, #8]
 8000e88:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <HAL_RCC_ClockConfig+0x11c>)
 8000e8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	40d8      	lsrs	r0, r3
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_RCC_ClockConfig+0x120>)
 8000e9c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff bb1c 	b.w	80004dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	f023 0307 	bic.w	r3, r3, #7
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	d1c2      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xa>
 8000eb8:	e7ca      	b.n	8000e50 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eba:	6862      	ldr	r2, [r4, #4]
 8000ebc:	4d23      	ldr	r5, [pc, #140]	; (8000f4c <HAL_RCC_ClockConfig+0x118>)
 8000ebe:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ec0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ec2:	d11b      	bne.n	8000efc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ec4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec8:	d0b9      	beq.n	8000e3e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000eca:	68ab      	ldr	r3, [r5, #8]
 8000ecc:	f023 0303 	bic.w	r3, r3, #3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000ed4:	f7ff fb32 	bl	800053c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000edc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ede:	68ab      	ldr	r3, [r5, #8]
 8000ee0:	6862      	ldr	r2, [r4, #4]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000eea:	d0b4      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eec:	f7ff fb26 	bl	800053c <HAL_GetTick>
 8000ef0:	1bc0      	subs	r0, r0, r7
 8000ef2:	4540      	cmp	r0, r8
 8000ef4:	d9f3      	bls.n	8000ede <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
}
 8000ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000efc:	2a02      	cmp	r2, #2
 8000efe:	d102      	bne.n	8000f06 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f04:	e7e0      	b.n	8000ec8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f06:	b912      	cbnz	r2, 8000f0e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f08:	f013 0f02 	tst.w	r3, #2
 8000f0c:	e7dc      	b.n	8000ec8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f0e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f12:	e7d9      	b.n	8000ec8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_RCC_ClockConfig+0x118>)
 8000f16:	68a0      	ldr	r0, [r4, #8]
 8000f18:	6893      	ldr	r3, [r2, #8]
 8000f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f1e:	4303      	orrs	r3, r0
 8000f20:	6093      	str	r3, [r2, #8]
 8000f22:	e79b      	b.n	8000e5c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	f023 0307 	bic.w	r3, r3, #7
 8000f2a:	4333      	orrs	r3, r6
 8000f2c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	429e      	cmp	r6, r3
 8000f36:	d182      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xa>
 8000f38:	e796      	b.n	8000e68 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f3a:	68ab      	ldr	r3, [r5, #8]
 8000f3c:	68e2      	ldr	r2, [r4, #12]
 8000f3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60ab      	str	r3, [r5, #8]
 8000f46:	e793      	b.n	8000e70 <HAL_RCC_ClockConfig+0x3c>
 8000f48:	40022000 	.word	0x40022000
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	080026bd 	.word	0x080026bd
 8000f54:	20000078 	.word	0x20000078

08000f58 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	f003 031f 	and.w	r3, r3, #31
}
 8000f6c:	40d8      	lsrs	r0, r3
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	080026cd 	.word	0x080026cd
 8000f78:	20000078 	.word	0x20000078

08000f7c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f8a:	6810      	ldr	r0, [r2, #0]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
}
 8000f90:	40d8      	lsrs	r0, r3
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000
 8000f98:	080026cd 	.word	0x080026cd
 8000f9c:	20000078 	.word	0x20000078

08000fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000fa2:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <RCCEx_PLLSAI1_Config+0x114>)
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	f012 0f03 	tst.w	r2, #3
{
 8000faa:	4605      	mov	r5, r0
 8000fac:	460e      	mov	r6, r1
 8000fae:	461c      	mov	r4, r3
 8000fb0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000fb2:	d039      	beq.n	8001028 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	4282      	cmp	r2, r0
 8000fbc:	d14b      	bne.n	8001056 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d049      	beq.n	8001056 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000fc2:	68db      	ldr	r3, [r3, #12]
       ||
 8000fc4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000fc6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000fca:	3301      	adds	r3, #1
       ||
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d142      	bne.n	8001056 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000fd6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fd8:	f7ff fab0 	bl	800053c <HAL_GetTick>
 8000fdc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	011a      	lsls	r2, r3, #4
 8000fe2:	d441      	bmi.n	8001068 <RCCEx_PLLSAI1_Config+0xc8>
 8000fe4:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	d045      	beq.n	8001076 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8000fea:	2e01      	cmp	r6, #1
 8000fec:	d14f      	bne.n	800108e <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000fee:	6922      	ldr	r2, [r4, #16]
 8000ff0:	6928      	ldr	r0, [r5, #16]
 8000ff2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8000ff6:	0840      	lsrs	r0, r0, #1
 8000ff8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001002:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001006:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800100e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001010:	f7ff fa94 	bl	800053c <HAL_GetTick>
 8001014:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	d545      	bpl.n	80010a8 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800101c:	6923      	ldr	r3, [r4, #16]
 800101e:	69aa      	ldr	r2, [r5, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	6123      	str	r3, [r4, #16]
 8001024:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001028:	2802      	cmp	r0, #2
 800102a:	d010      	beq.n	800104e <RCCEx_PLLSAI1_Config+0xae>
 800102c:	2803      	cmp	r0, #3
 800102e:	d014      	beq.n	800105a <RCCEx_PLLSAI1_Config+0xba>
 8001030:	2801      	cmp	r0, #1
 8001032:	d110      	bne.n	8001056 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	079f      	lsls	r7, r3, #30
 8001038:	d5f5      	bpl.n	8001026 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800103a:	68e3      	ldr	r3, [r4, #12]
 800103c:	686a      	ldr	r2, [r5, #4]
 800103e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001042:	3a01      	subs	r2, #1
 8001044:	4318      	orrs	r0, r3
 8001046:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800104a:	60e0      	str	r0, [r4, #12]
 800104c:	e7c0      	b.n	8000fd0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001054:	d1f1      	bne.n	800103a <RCCEx_PLLSAI1_Config+0x9a>
 8001056:	2001      	movs	r0, #1
 8001058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	0391      	lsls	r1, r2, #14
 800105e:	d4ec      	bmi.n	800103a <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001066:	e7f5      	b.n	8001054 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001068:	f7ff fa68 	bl	800053c <HAL_GetTick>
 800106c:	1bc0      	subs	r0, r0, r7
 800106e:	2802      	cmp	r0, #2
 8001070:	d9b5      	bls.n	8000fde <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001076:	6922      	ldr	r2, [r4, #16]
 8001078:	68e9      	ldr	r1, [r5, #12]
 800107a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800107e:	06c9      	lsls	r1, r1, #27
 8001080:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001084:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001088:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800108a:	6123      	str	r3, [r4, #16]
 800108c:	e7bc      	b.n	8001008 <RCCEx_PLLSAI1_Config+0x68>
 800108e:	6923      	ldr	r3, [r4, #16]
 8001090:	6968      	ldr	r0, [r5, #20]
 8001092:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001096:	0840      	lsrs	r0, r0, #1
 8001098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800109c:	3801      	subs	r0, #1
 800109e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80010a2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80010a6:	e7f0      	b.n	800108a <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010a8:	f7ff fa48 	bl	800053c <HAL_GetTick>
 80010ac:	1b80      	subs	r0, r0, r6
 80010ae:	2802      	cmp	r0, #2
 80010b0:	d9b1      	bls.n	8001016 <RCCEx_PLLSAI1_Config+0x76>
 80010b2:	e7de      	b.n	8001072 <RCCEx_PLLSAI1_Config+0xd2>
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80010b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80010bc:	6805      	ldr	r5, [r0, #0]
 80010be:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80010c2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80010c4:	d00e      	beq.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80010c6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80010cc:	d053      	beq.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80010ce:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80010d2:	d055      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80010d4:	2900      	cmp	r1, #0
 80010d6:	d15e      	bne.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80010d8:	3004      	adds	r0, #4
 80010da:	f7ff ff61 	bl	8000fa0 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80010de:	4605      	mov	r5, r0
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d04d      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	039e      	lsls	r6, r3, #14
 80010e8:	d563      	bpl.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010ea:	4e93      	ldr	r6, [pc, #588]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80010ec:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80010ee:	00d8      	lsls	r0, r3, #3
 80010f0:	f140 8116 	bpl.w	8001320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 80010f4:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010f6:	f8df 8244 	ldr.w	r8, [pc, #580]	; 800133c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80010fa:	f8d8 3000 	ldr.w	r3, [r8]
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001106:	f7ff fa19 	bl	800053c <HAL_GetTick>
 800110a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800110c:	f8d8 3000 	ldr.w	r3, [r8]
 8001110:	05d9      	lsls	r1, r3, #23
 8001112:	d542      	bpl.n	800119a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8001114:	2d00      	cmp	r5, #0
 8001116:	d147      	bne.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001118:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800111c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001120:	d014      	beq.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001122:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001124:	4293      	cmp	r3, r2
 8001126:	d011      	beq.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001128:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800112c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001130:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001134:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001138:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800113c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001144:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001148:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800114c:	07da      	lsls	r2, r3, #31
 800114e:	d509      	bpl.n	8001164 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8001150:	f7ff f9f4 	bl	800053c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001154:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001158:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800115e:	079b      	lsls	r3, r3, #30
 8001160:	f140 80c0 	bpl.w	80012e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001164:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001168:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800116a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800116e:	4313      	orrs	r3, r2
 8001170:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001174:	e018      	b.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001176:	4a70      	ldr	r2, [pc, #448]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001178:	68d3      	ldr	r3, [r2, #12]
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001180:	4a6d      	ldr	r2, [pc, #436]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001182:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001184:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001188:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800118c:	430b      	orrs	r3, r1
 800118e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001192:	2500      	movs	r5, #0
 8001194:	e7a6      	b.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001196:	2501      	movs	r5, #1
 8001198:	e7a4      	b.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff f9cf 	bl	800053c <HAL_GetTick>
 800119e:	eba0 0009 	sub.w	r0, r0, r9
 80011a2:	2802      	cmp	r0, #2
 80011a4:	d9b2      	bls.n	800110c <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 80011a6:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80011a8:	b11f      	cbz	r7, 80011b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011aa:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80011ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b0:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	07df      	lsls	r7, r3, #31
 80011b6:	d508      	bpl.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011b8:	495f      	ldr	r1, [pc, #380]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80011ba:	6a20      	ldr	r0, [r4, #32]
 80011bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80011c0:	f022 0203 	bic.w	r2, r2, #3
 80011c4:	4302      	orrs	r2, r0
 80011c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80011ca:	079e      	lsls	r6, r3, #30
 80011cc:	d508      	bpl.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80011ce:	495a      	ldr	r1, [pc, #360]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80011d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80011d6:	f022 020c 	bic.w	r2, r2, #12
 80011da:	4302      	orrs	r2, r0
 80011dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80011e0:	0698      	lsls	r0, r3, #26
 80011e2:	d508      	bpl.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80011e4:	4954      	ldr	r1, [pc, #336]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80011e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80011ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80011f0:	4302      	orrs	r2, r0
 80011f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80011f6:	0599      	lsls	r1, r3, #22
 80011f8:	d508      	bpl.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80011fa:	494f      	ldr	r1, [pc, #316]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80011fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80011fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001202:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001206:	4302      	orrs	r2, r0
 8001208:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800120c:	055a      	lsls	r2, r3, #21
 800120e:	d508      	bpl.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001210:	4949      	ldr	r1, [pc, #292]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001212:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001214:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001218:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800121c:	4302      	orrs	r2, r0
 800121e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001222:	065f      	lsls	r7, r3, #25
 8001224:	d508      	bpl.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001226:	4944      	ldr	r1, [pc, #272]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001228:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800122a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800122e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001232:	4302      	orrs	r2, r0
 8001234:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001238:	05de      	lsls	r6, r3, #23
 800123a:	d508      	bpl.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800123c:	493e      	ldr	r1, [pc, #248]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800123e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001240:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001244:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001248:	4302      	orrs	r2, r0
 800124a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800124e:	0498      	lsls	r0, r3, #18
 8001250:	d50f      	bpl.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001252:	4a39      	ldr	r2, [pc, #228]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001254:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001256:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800125a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800125e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001260:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001268:	d144      	bne.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800126a:	68d3      	ldr	r3, [r2, #12]
 800126c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001270:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	0359      	lsls	r1, r3, #13
 8001276:	d50f      	bpl.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001278:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800127a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800127c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001280:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001284:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001286:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800128a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800128e:	d13c      	bne.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001290:	68d3      	ldr	r3, [r2, #12]
 8001292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001296:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	045a      	lsls	r2, r3, #17
 800129c:	d512      	bpl.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800129e:	4926      	ldr	r1, [pc, #152]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80012a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80012a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80012aa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80012ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80012b4:	d106      	bne.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80012b6:	2102      	movs	r1, #2
 80012b8:	1d20      	adds	r0, r4, #4
 80012ba:	f7ff fe71 	bl	8000fa0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80012be:	2800      	cmp	r0, #0
 80012c0:	bf18      	it	ne
 80012c2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	d508      	bpl.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80012ca:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80012cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80012ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012d6:	430b      	orrs	r3, r1
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80012dc:	4628      	mov	r0, r5
 80012de:	b003      	add	sp, #12
 80012e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff f92a 	bl	800053c <HAL_GetTick>
 80012e8:	eba0 0008 	sub.w	r0, r0, r8
 80012ec:	4548      	cmp	r0, r9
 80012ee:	f67f af34 	bls.w	800115a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80012f2:	e758      	b.n	80011a6 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80012f4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80012f8:	d1bb      	bne.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80012fa:	2101      	movs	r1, #1
 80012fc:	1d20      	adds	r0, r4, #4
 80012fe:	f7ff fe4f 	bl	8000fa0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001302:	2800      	cmp	r0, #0
 8001304:	bf18      	it	ne
 8001306:	4605      	movne	r5, r0
 8001308:	e7b3      	b.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800130a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800130e:	d1c3      	bne.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001310:	2101      	movs	r1, #1
 8001312:	1d20      	adds	r0, r4, #4
 8001314:	f7ff fe44 	bl	8000fa0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001318:	2800      	cmp	r0, #0
 800131a:	bf18      	it	ne
 800131c:	4605      	movne	r5, r0
 800131e:	e7bb      	b.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	65b3      	str	r3, [r6, #88]	; 0x58
 8001328:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001332:	2701      	movs	r7, #1
 8001334:	e6df      	b.n	80010f6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	40007000 	.word	0x40007000

08001340 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001340:	4a02      	ldr	r2, [pc, #8]	; (800134c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000

08001350 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001350:	6a03      	ldr	r3, [r0, #32]
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001358:	6a03      	ldr	r3, [r0, #32]
{
 800135a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800135c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800135e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001360:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001362:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001366:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800136a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800136c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800136e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001372:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001374:	4c12      	ldr	r4, [pc, #72]	; (80013c0 <TIM_OC1_SetConfig+0x70>)
 8001376:	42a0      	cmp	r0, r4
 8001378:	d006      	beq.n	8001388 <TIM_OC1_SetConfig+0x38>
 800137a:	4e12      	ldr	r6, [pc, #72]	; (80013c4 <TIM_OC1_SetConfig+0x74>)
 800137c:	42b0      	cmp	r0, r6
 800137e:	d003      	beq.n	8001388 <TIM_OC1_SetConfig+0x38>
 8001380:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001384:	42b0      	cmp	r0, r6
 8001386:	d114      	bne.n	80013b2 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001388:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800138a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800138e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001390:	42a0      	cmp	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8001392:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001396:	d006      	beq.n	80013a6 <TIM_OC1_SetConfig+0x56>
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <TIM_OC1_SetConfig+0x74>)
 800139a:	42a0      	cmp	r0, r4
 800139c:	d003      	beq.n	80013a6 <TIM_OC1_SetConfig+0x56>
 800139e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013a2:	42a0      	cmp	r0, r4
 80013a4:	d105      	bne.n	80013b2 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80013a6:	694c      	ldr	r4, [r1, #20]
 80013a8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80013aa:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80013ae:	4334      	orrs	r4, r6
 80013b0:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013b4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80013b6:	684a      	ldr	r2, [r1, #4]
 80013b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013ba:	6203      	str	r3, [r0, #32]
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	bf00      	nop
 80013c0:	40012c00 	.word	0x40012c00
 80013c4:	40014000 	.word	0x40014000

080013c8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013c8:	6a03      	ldr	r3, [r0, #32]
 80013ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013d0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013d2:	6842      	ldr	r2, [r0, #4]
{
 80013d4:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013d6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80013da:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80013de:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013e2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80013ee:	4d0f      	ldr	r5, [pc, #60]	; (800142c <TIM_OC3_SetConfig+0x64>)
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	d10e      	bne.n	8001412 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80013fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001402:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001404:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001406:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800140a:	4335      	orrs	r5, r6
 800140c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001410:	e005      	b.n	800141e <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001412:	4d07      	ldr	r5, [pc, #28]	; (8001430 <TIM_OC3_SetConfig+0x68>)
 8001414:	42a8      	cmp	r0, r5
 8001416:	d0f4      	beq.n	8001402 <TIM_OC3_SetConfig+0x3a>
 8001418:	4d06      	ldr	r5, [pc, #24]	; (8001434 <TIM_OC3_SetConfig+0x6c>)
 800141a:	42a8      	cmp	r0, r5
 800141c:	d0f1      	beq.n	8001402 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800141e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001420:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001422:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001424:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001426:	6203      	str	r3, [r0, #32]
}
 8001428:	bd70      	pop	{r4, r5, r6, pc}
 800142a:	bf00      	nop
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40014000 	.word	0x40014000
 8001434:	40014400 	.word	0x40014400

08001438 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001438:	6a03      	ldr	r3, [r0, #32]
 800143a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800143e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001440:	6a02      	ldr	r2, [r0, #32]
{
 8001442:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001444:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001446:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001448:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800144a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800144e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001452:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001456:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800145c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001460:	4d0a      	ldr	r5, [pc, #40]	; (800148c <TIM_OC4_SetConfig+0x54>)
 8001462:	42a8      	cmp	r0, r5
 8001464:	d007      	beq.n	8001476 <TIM_OC4_SetConfig+0x3e>
 8001466:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800146a:	42a8      	cmp	r0, r5
 800146c:	d003      	beq.n	8001476 <TIM_OC4_SetConfig+0x3e>
 800146e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001472:	42a8      	cmp	r0, r5
 8001474:	d104      	bne.n	8001480 <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001476:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001478:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800147c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001480:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001482:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001484:	684b      	ldr	r3, [r1, #4]
 8001486:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001488:	6202      	str	r2, [r0, #32]
 800148a:	bd30      	pop	{r4, r5, pc}
 800148c:	40012c00 	.word	0x40012c00

08001490 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001490:	6a03      	ldr	r3, [r0, #32]
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001498:	6a02      	ldr	r2, [r0, #32]
{
 800149a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800149c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800149e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80014aa:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80014ac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80014ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80014b2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014b6:	4d0b      	ldr	r5, [pc, #44]	; (80014e4 <TIM_OC5_SetConfig+0x54>)
 80014b8:	42a8      	cmp	r0, r5
 80014ba:	d007      	beq.n	80014cc <TIM_OC5_SetConfig+0x3c>
 80014bc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80014c0:	42a8      	cmp	r0, r5
 80014c2:	d003      	beq.n	80014cc <TIM_OC5_SetConfig+0x3c>
 80014c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014c8:	42a8      	cmp	r0, r5
 80014ca:	d104      	bne.n	80014d6 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80014cc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80014ce:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80014d2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80014d8:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80014da:	684b      	ldr	r3, [r1, #4]
 80014dc:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014de:	6202      	str	r2, [r0, #32]
 80014e0:	bd30      	pop	{r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80014e8:	6a03      	ldr	r3, [r0, #32]
 80014ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014f0:	6a02      	ldr	r2, [r0, #32]
{
 80014f2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80014f6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80014fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001502:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001506:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001508:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800150c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001510:	4d0a      	ldr	r5, [pc, #40]	; (800153c <TIM_OC6_SetConfig+0x54>)
 8001512:	42a8      	cmp	r0, r5
 8001514:	d007      	beq.n	8001526 <TIM_OC6_SetConfig+0x3e>
 8001516:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800151a:	42a8      	cmp	r0, r5
 800151c:	d003      	beq.n	8001526 <TIM_OC6_SetConfig+0x3e>
 800151e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001522:	42a8      	cmp	r0, r5
 8001524:	d104      	bne.n	8001530 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001526:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001528:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800152c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001530:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001532:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001534:	684b      	ldr	r3, [r1, #4]
 8001536:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001538:	6202      	str	r2, [r0, #32]
 800153a:	bd30      	pop	{r4, r5, pc}
 800153c:	40012c00 	.word	0x40012c00

08001540 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001540:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001542:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001544:	4290      	cmp	r0, r2
{
 8001546:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001548:	d002      	beq.n	8001550 <TIM_Base_SetConfig+0x10>
 800154a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800154e:	d109      	bne.n	8001564 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 8001550:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001556:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001558:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800155c:	d009      	beq.n	8001572 <TIM_Base_SetConfig+0x32>
 800155e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001562:	d006      	beq.n	8001572 <TIM_Base_SetConfig+0x32>
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <TIM_Base_SetConfig+0x70>)
 8001566:	4290      	cmp	r0, r2
 8001568:	d003      	beq.n	8001572 <TIM_Base_SetConfig+0x32>
 800156a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800156e:	4290      	cmp	r0, r2
 8001570:	d103      	bne.n	800157a <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001572:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001578:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800157a:	694a      	ldr	r2, [r1, #20]
 800157c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001580:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001582:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001584:	688b      	ldr	r3, [r1, #8]
 8001586:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001588:	680b      	ldr	r3, [r1, #0]
 800158a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <TIM_Base_SetConfig+0x6c>)
 800158e:	4298      	cmp	r0, r3
 8001590:	d007      	beq.n	80015a2 <TIM_Base_SetConfig+0x62>
 8001592:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001596:	4298      	cmp	r0, r3
 8001598:	d003      	beq.n	80015a2 <TIM_Base_SetConfig+0x62>
 800159a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800159e:	4298      	cmp	r0, r3
 80015a0:	d101      	bne.n	80015a6 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80015a2:	690b      	ldr	r3, [r1, #16]
 80015a4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80015a6:	2301      	movs	r3, #1
 80015a8:	6143      	str	r3, [r0, #20]
 80015aa:	bd10      	pop	{r4, pc}
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40014000 	.word	0x40014000

080015b4 <HAL_TIM_PWM_Init>:
{
 80015b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80015b6:	4604      	mov	r4, r0
 80015b8:	b1a0      	cbz	r0, 80015e4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80015ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015c2:	b91b      	cbnz	r3, 80015cc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80015c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80015c8:	f000 ff16 	bl	80023f8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	1d21      	adds	r1, r4, #4
 80015d6:	f7ff ffb3 	bl	8001540 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80015da:	2301      	movs	r3, #1
 80015dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80015e0:	2000      	movs	r0, #0
 80015e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
}
 80015e6:	bd10      	pop	{r4, pc}

080015e8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015e8:	6a03      	ldr	r3, [r0, #32]
 80015ea:	f023 0310 	bic.w	r3, r3, #16
 80015ee:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80015f0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80015f2:	6842      	ldr	r2, [r0, #4]
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80015f6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015fa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80015fe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001602:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001606:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001608:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800160c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001610:	4d0e      	ldr	r5, [pc, #56]	; (800164c <TIM_OC2_SetConfig+0x64>)
 8001612:	42a8      	cmp	r0, r5
 8001614:	d10e      	bne.n	8001634 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001616:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800161c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001624:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001626:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001628:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800162c:	4335      	orrs	r5, r6
 800162e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001632:	e005      	b.n	8001640 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001634:	4d06      	ldr	r5, [pc, #24]	; (8001650 <TIM_OC2_SetConfig+0x68>)
 8001636:	42a8      	cmp	r0, r5
 8001638:	d0f4      	beq.n	8001624 <TIM_OC2_SetConfig+0x3c>
 800163a:	4d06      	ldr	r5, [pc, #24]	; (8001654 <TIM_OC2_SetConfig+0x6c>)
 800163c:	42a8      	cmp	r0, r5
 800163e:	d0f1      	beq.n	8001624 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8001640:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001642:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001644:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001646:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001648:	6203      	str	r3, [r0, #32]
}
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	40012c00 	.word	0x40012c00
 8001650:	40014000 	.word	0x40014000
 8001654:	40014400 	.word	0x40014400

08001658 <HAL_TIM_PWM_ConfigChannel>:
{
 8001658:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800165a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800165e:	2b01      	cmp	r3, #1
{
 8001660:	4604      	mov	r4, r0
 8001662:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001666:	d010      	beq.n	800168a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001668:	2301      	movs	r3, #1
  switch (Channel)
 800166a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800166c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001674:	d043      	beq.n	80016fe <HAL_TIM_PWM_ConfigChannel+0xa6>
 8001676:	d809      	bhi.n	800168c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001678:	b1fa      	cbz	r2, 80016ba <HAL_TIM_PWM_ConfigChannel+0x62>
 800167a:	2a04      	cmp	r2, #4
 800167c:	d02e      	beq.n	80016dc <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800167e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001680:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001686:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800168a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800168c:	2a10      	cmp	r2, #16
 800168e:	d047      	beq.n	8001720 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8001690:	2a14      	cmp	r2, #20
 8001692:	d056      	beq.n	8001742 <HAL_TIM_PWM_ConfigChannel+0xea>
 8001694:	2a0c      	cmp	r2, #12
 8001696:	d1f2      	bne.n	800167e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f7ff fecd 	bl	8001438 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800169e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016b8:	e030      	b.n	800171c <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80016ba:	6820      	ldr	r0, [r4, #0]
 80016bc:	f7ff fe48 	bl	8001350 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80016c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80016c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	f042 0208 	orr.w	r2, r2, #8
 80016ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	f022 0204 	bic.w	r2, r2, #4
 80016d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016d8:	619a      	str	r2, [r3, #24]
      break;
 80016da:	e7d0      	b.n	800167e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	f7ff ff83 	bl	80015e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016e6:	699a      	ldr	r2, [r3, #24]
 80016e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016fc:	e7ec      	b.n	80016d8 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	f7ff fe62 	bl	80013c8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001704:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001706:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800171c:	61da      	str	r2, [r3, #28]
      break;
 800171e:	e7ae      	b.n	800167e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	f7ff feb5 	bl	8001490 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001726:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001728:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800172a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800172c:	f042 0208 	orr.w	r2, r2, #8
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001732:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001734:	f022 0204 	bic.w	r2, r2, #4
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800173a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800173c:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001740:	e79d      	b.n	800167e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001742:	6820      	ldr	r0, [r4, #0]
 8001744:	f7ff fed0 	bl	80014e8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001748:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800174a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800174c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800174e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800175c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800175e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001762:	e7ec      	b.n	800173e <HAL_TIM_PWM_ConfigChannel+0xe6>

08001764 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001764:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001766:	f001 011f 	and.w	r1, r1, #31
{
 800176a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800176c:	2401      	movs	r4, #1
 800176e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001770:	ea23 0304 	bic.w	r3, r3, r4
 8001774:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001776:	6a03      	ldr	r3, [r0, #32]
 8001778:	408a      	lsls	r2, r1
 800177a:	431a      	orrs	r2, r3
 800177c:	6202      	str	r2, [r0, #32]
 800177e:	bd10      	pop	{r4, pc}

08001780 <HAL_TIM_PWM_Start>:
{
 8001780:	b510      	push	{r4, lr}
 8001782:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001784:	2201      	movs	r2, #1
 8001786:	6800      	ldr	r0, [r0, #0]
 8001788:	f7ff ffec 	bl	8001764 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_TIM_PWM_Start+0x50>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d017      	beq.n	80017c4 <HAL_TIM_PWM_Start+0x44>
 8001794:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_TIM_PWM_Start+0x44>
 800179c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00f      	beq.n	80017c4 <HAL_TIM_PWM_Start+0x44>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <HAL_TIM_PWM_Start+0x54>)
 80017a8:	4001      	ands	r1, r0
 80017aa:	2906      	cmp	r1, #6
 80017ac:	d008      	beq.n	80017c0 <HAL_TIM_PWM_Start+0x40>
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4002      	ands	r2, r0
 80017b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80017b6:	d003      	beq.n	80017c0 <HAL_TIM_PWM_Start+0x40>
    __HAL_TIM_ENABLE(htim);
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	2000      	movs	r0, #0
 80017c2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80017c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	e7ea      	b.n	80017a4 <HAL_TIM_PWM_Start+0x24>
 80017ce:	bf00      	nop
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	00010007 	.word	0x00010007

080017d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017dc:	2b01      	cmp	r3, #1
{
 80017de:	b530      	push	{r4, r5, lr}
 80017e0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80017e4:	d01b      	beq.n	800181e <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017e6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80017e8:	4d0e      	ldr	r5, [pc, #56]	; (8001824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80017ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80017ee:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80017f0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80017f2:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80017f4:	bf02      	ittt	eq
 80017f6:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80017f8:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80017fc:	432b      	orreq	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017fe:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001800:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001806:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001808:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800180c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800180e:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001810:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8001812:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001814:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001818:	2300      	movs	r3, #0
 800181a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800181e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001820:	bd30      	pop	{r4, r5, pc}
 8001822:	bf00      	nop
 8001824:	40012c00 	.word	0x40012c00

08001828 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800182c:	2b01      	cmp	r3, #1
{
 800182e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001830:	d034      	beq.n	800189c <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001832:	68cb      	ldr	r3, [r1, #12]
 8001834:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001836:	4c1a      	ldr	r4, [pc, #104]	; (80018a0 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800183e:	684a      	ldr	r2, [r1, #4]
 8001840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001844:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001846:	680a      	ldr	r2, [r1, #0]
 8001848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800184c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800184e:	690a      	ldr	r2, [r1, #16]
 8001850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001854:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001856:	694a      	ldr	r2, [r1, #20]
 8001858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800185c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800185e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001864:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8001866:	698a      	ldr	r2, [r1, #24]
 8001868:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800186c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	42a2      	cmp	r2, r4
 8001874:	d10c      	bne.n	8001890 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8001876:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001878:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800187c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001880:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001882:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001888:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800188a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800188e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001890:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001892:	2300      	movs	r3, #0
 8001894:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001898:	4618      	mov	r0, r3
 800189a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800189c:	2002      	movs	r0, #2
}
 800189e:	bd10      	pop	{r4, pc}
 80018a0:	40012c00 	.word	0x40012c00

080018a4 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018a4:	6803      	ldr	r3, [r0, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018ac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018b6:	2320      	movs	r3, #32
 80018b8:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	6603      	str	r3, [r0, #96]	; 0x60
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80018c4:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d149      	bne.n	8001960 <HAL_UART_Receive_IT+0x9c>
    if ((pData == NULL) || (Size == 0U))
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d045      	beq.n	800195c <HAL_UART_Receive_IT+0x98>
 80018d0:	2a00      	cmp	r2, #0
 80018d2:	d043      	beq.n	800195c <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 80018d4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d041      	beq.n	8001960 <HAL_UART_Receive_IT+0x9c>
 80018dc:	2301      	movs	r3, #1
 80018de:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80018e6:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 80018e8:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 80018ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 80018ee:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80018f2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80018f6:	d121      	bne.n	800193c <HAL_UART_Receive_IT+0x78>
 80018f8:	6902      	ldr	r2, [r0, #16]
 80018fa:	b9ea      	cbnz	r2, 8001938 <HAL_UART_Receive_IT+0x74>
 80018fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001900:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001904:	2200      	movs	r2, #0
 8001906:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001908:	2222      	movs	r2, #34	; 0x22
 800190a:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800190e:	6802      	ldr	r2, [r0, #0]
 8001910:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001916:	f041 0101 	orr.w	r1, r1, #1
 800191a:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800191c:	d11c      	bne.n	8001958 <HAL_UART_Receive_IT+0x94>
 800191e:	6903      	ldr	r3, [r0, #16]
 8001920:	b9d3      	cbnz	r3, 8001958 <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001924:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8001926:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001928:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 800192c:	2300      	movs	r3, #0
 800192e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001932:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001934:	4618      	mov	r0, r3
 8001936:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001938:	22ff      	movs	r2, #255	; 0xff
 800193a:	e7e1      	b.n	8001900 <HAL_UART_Receive_IT+0x3c>
 800193c:	b923      	cbnz	r3, 8001948 <HAL_UART_Receive_IT+0x84>
 800193e:	6902      	ldr	r2, [r0, #16]
 8001940:	2a00      	cmp	r2, #0
 8001942:	d0f9      	beq.n	8001938 <HAL_UART_Receive_IT+0x74>
 8001944:	227f      	movs	r2, #127	; 0x7f
 8001946:	e7db      	b.n	8001900 <HAL_UART_Receive_IT+0x3c>
 8001948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800194c:	d1da      	bne.n	8001904 <HAL_UART_Receive_IT+0x40>
 800194e:	6902      	ldr	r2, [r0, #16]
 8001950:	2a00      	cmp	r2, #0
 8001952:	d0f7      	beq.n	8001944 <HAL_UART_Receive_IT+0x80>
 8001954:	223f      	movs	r2, #63	; 0x3f
 8001956:	e7d3      	b.n	8001900 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_UART_Receive_IT+0xa4>)
 800195a:	e7e3      	b.n	8001924 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 800195c:	2001      	movs	r0, #1
 800195e:	4770      	bx	lr
    return HAL_BUSY;
 8001960:	2002      	movs	r0, #2
}
 8001962:	4770      	bx	lr
 8001964:	080019c5 	.word	0x080019c5
 8001968:	0800196f 	.word	0x0800196f

0800196c <HAL_UART_TxCpltCallback>:
 800196c:	4770      	bx	lr

0800196e <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800196e:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8001972:	2a22      	cmp	r2, #34	; 0x22
{
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001978:	d11e      	bne.n	80019b8 <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800197a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800197c:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 800197e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001982:	1c65      	adds	r5, r4, #1
 8001984:	400a      	ands	r2, r1
 8001986:	6545      	str	r5, [r0, #84]	; 0x54
 8001988:	7022      	strb	r2, [r4, #0]

    if (--huart->RxXferCount == 0)
 800198a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800198e:	3a01      	subs	r2, #1
 8001990:	b292      	uxth	r2, r2
 8001992:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8001996:	b9a2      	cbnz	r2, 80019c2 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001998:	6801      	ldr	r1, [r0, #0]
 800199a:	680c      	ldr	r4, [r1, #0]
 800199c:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80019a0:	600c      	str	r4, [r1, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019a2:	688c      	ldr	r4, [r1, #8]
 80019a4:	f024 0401 	bic.w	r4, r4, #1
 80019a8:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80019aa:	2120      	movs	r1, #32
 80019ac:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80019b0:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80019b2:	f000 fcf7 	bl	80023a4 <HAL_UART_RxCpltCallback>
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80019b8:	8b13      	ldrh	r3, [r2, #24]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	8313      	strh	r3, [r2, #24]
 80019c2:	bd38      	pop	{r3, r4, r5, pc}

080019c4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019c4:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 80019c8:	2a22      	cmp	r2, #34	; 0x22
{
 80019ca:	b510      	push	{r4, lr}
 80019cc:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019ce:	d11d      	bne.n	8001a0c <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80019d0:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80019d2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80019d6:	400c      	ands	r4, r1
 80019d8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80019da:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2;
 80019de:	6541      	str	r1, [r0, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 80019e0:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 80019e4:	3901      	subs	r1, #1
 80019e6:	b289      	uxth	r1, r1
 80019e8:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 80019ec:	b999      	cbnz	r1, 8001a16 <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019ee:	6814      	ldr	r4, [r2, #0]
 80019f0:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80019f4:	6014      	str	r4, [r2, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f6:	6894      	ldr	r4, [r2, #8]
 80019f8:	f024 0401 	bic.w	r4, r4, #1
 80019fc:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80019fe:	2220      	movs	r2, #32
 8001a00:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001a04:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001a06:	f000 fccd 	bl	80023a4 <HAL_UART_RxCpltCallback>
 8001a0a:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001a0c:	8b13      	ldrh	r3, [r2, #24]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	8313      	strh	r3, [r2, #24]
 8001a16:	bd10      	pop	{r4, pc}

08001a18 <HAL_UART_ErrorCallback>:
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a20:	6819      	ldr	r1, [r3, #0]
{
 8001a22:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001a24:	0716      	lsls	r6, r2, #28
{
 8001a26:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a28:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8001a2a:	d10a      	bne.n	8001a42 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8001a2c:	0696      	lsls	r6, r2, #26
 8001a2e:	d564      	bpl.n	8001afa <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a30:	068e      	lsls	r6, r1, #26
 8001a32:	d562      	bpl.n	8001afa <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8001a34:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8083 	beq.w	8001b42 <HAL_UART_IRQHandler+0x126>
}
 8001a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001a40:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8001a42:	f015 0001 	ands.w	r0, r5, #1
 8001a46:	d102      	bne.n	8001a4e <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a48:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001a4c:	d055      	beq.n	8001afa <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a4e:	07d5      	lsls	r5, r2, #31
 8001a50:	d507      	bpl.n	8001a62 <HAL_UART_IRQHandler+0x46>
 8001a52:	05ce      	lsls	r6, r1, #23
 8001a54:	d505      	bpl.n	8001a62 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a56:	2501      	movs	r5, #1
 8001a58:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a5a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001a5c:	f045 0501 	orr.w	r5, r5, #1
 8001a60:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a62:	0795      	lsls	r5, r2, #30
 8001a64:	d506      	bpl.n	8001a74 <HAL_UART_IRQHandler+0x58>
 8001a66:	b128      	cbz	r0, 8001a74 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001a68:	2502      	movs	r5, #2
 8001a6a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a6c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001a6e:	f045 0504 	orr.w	r5, r5, #4
 8001a72:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a74:	0756      	lsls	r6, r2, #29
 8001a76:	d506      	bpl.n	8001a86 <HAL_UART_IRQHandler+0x6a>
 8001a78:	b128      	cbz	r0, 8001a86 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001a7a:	2504      	movs	r5, #4
 8001a7c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a7e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001a80:	f045 0502 	orr.w	r5, r5, #2
 8001a84:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8001a86:	0715      	lsls	r5, r2, #28
 8001a88:	d507      	bpl.n	8001a9a <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8001a8a:	068e      	lsls	r6, r1, #26
 8001a8c:	d400      	bmi.n	8001a90 <HAL_UART_IRQHandler+0x74>
 8001a8e:	b120      	cbz	r0, 8001a9a <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001a90:	2008      	movs	r0, #8
 8001a92:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a94:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001a96:	4303      	orrs	r3, r0
 8001a98:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a9a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d050      	beq.n	8001b42 <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8001aa0:	0695      	lsls	r5, r2, #26
 8001aa2:	d505      	bpl.n	8001ab0 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001aa4:	0688      	lsls	r0, r1, #26
 8001aa6:	d503      	bpl.n	8001ab0 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8001aa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001aaa:	b10b      	cbz	r3, 8001ab0 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8001aac:	4620      	mov	r0, r4
 8001aae:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001ab0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001ab2:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8001ab4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001ab6:	d404      	bmi.n	8001ac2 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001abc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001ac0:	d017      	beq.n	8001af2 <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8001ac2:	f7ff feef 	bl	80018a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	0652      	lsls	r2, r2, #25
 8001acc:	d50d      	bpl.n	8001aea <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ace:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001ad0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad6:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001ad8:	b138      	cbz	r0, 8001aea <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_UART_IRQHandler+0x128>)
 8001adc:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ade:	f7fe fd9b 	bl	8000618 <HAL_DMA_Abort_IT>
 8001ae2:	b370      	cbz	r0, 8001b42 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ae4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ae6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ae8:	e7a8      	b.n	8001a3c <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff ff94 	bl	8001a18 <HAL_UART_ErrorCallback>
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001af2:	f7ff ff91 	bl	8001a18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	6765      	str	r5, [r4, #116]	; 0x74
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001afa:	02d6      	lsls	r6, r2, #11
 8001afc:	d509      	bpl.n	8001b12 <HAL_UART_IRQHandler+0xf6>
 8001afe:	0268      	lsls	r0, r5, #9
 8001b00:	d507      	bpl.n	8001b12 <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001b02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8001b06:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001b08:	621a      	str	r2, [r3, #32]
}
 8001b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001b0e:	f000 ba87 	b.w	8002020 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8001b12:	0616      	lsls	r6, r2, #24
 8001b14:	d505      	bpl.n	8001b22 <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b16:	060d      	lsls	r5, r1, #24
 8001b18:	d503      	bpl.n	8001b22 <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8001b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b1c:	b18b      	cbz	r3, 8001b42 <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8001b1e:	4620      	mov	r0, r4
 8001b20:	e78c      	b.n	8001a3c <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b22:	0650      	lsls	r0, r2, #25
 8001b24:	d50d      	bpl.n	8001b42 <HAL_UART_IRQHandler+0x126>
 8001b26:	064a      	lsls	r2, r1, #25
 8001b28:	d50b      	bpl.n	8001b42 <HAL_UART_IRQHandler+0x126>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b30:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001b32:	2320      	movs	r3, #32
 8001b34:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff ff15 	bl	800196c <HAL_UART_TxCpltCallback>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	08001b49 	.word	0x08001b49

08001b48 <UART_DMAAbortOnError>:
{
 8001b48:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001b4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001b52:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001b56:	f7ff ff5f 	bl	8001a18 <HAL_UART_ErrorCallback>
 8001b5a:	bd08      	pop	{r3, pc}

08001b5c <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b5c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b5e:	69c1      	ldr	r1, [r0, #28]
{
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b64:	6883      	ldr	r3, [r0, #8]
 8001b66:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b68:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b6a:	4303      	orrs	r3, r0
 8001b6c:	6960      	ldr	r0, [r4, #20]
 8001b6e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b70:	4882      	ldr	r0, [pc, #520]	; (8001d7c <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b72:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b74:	4028      	ands	r0, r5
 8001b76:	4303      	orrs	r3, r0
 8001b78:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b7a:	6853      	ldr	r3, [r2, #4]
 8001b7c:	68e0      	ldr	r0, [r4, #12]
 8001b7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b82:	4303      	orrs	r3, r0
 8001b84:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b86:	4b7e      	ldr	r3, [pc, #504]	; (8001d80 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b88:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b8a:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8001b8c:	bf1c      	itt	ne
 8001b8e:	6a23      	ldrne	r3, [r4, #32]
 8001b90:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b92:	6893      	ldr	r3, [r2, #8]
 8001b94:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001b98:	4303      	orrs	r3, r0
 8001b9a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b9c:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <UART_SetConfig+0x228>)
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d114      	bne.n	8001bcc <UART_SetConfig+0x70>
 8001ba2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ba6:	4a78      	ldr	r2, [pc, #480]	; (8001d88 <UART_SetConfig+0x22c>)
 8001ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bac:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	f040 80aa 	bne.w	8001d0e <UART_SetConfig+0x1b2>
    switch (clocksource)
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d820      	bhi.n	8001c00 <UART_SetConfig+0xa4>
 8001bbe:	e8df f003 	tbb	[pc, r3]
 8001bc2:	8f77      	.short	0x8f77
 8001bc4:	1f9b1f92 	.word	0x1f9b1f92
 8001bc8:	1f1f      	.short	0x1f1f
 8001bca:	9e          	.byte	0x9e
 8001bcb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <UART_SetConfig+0x230>)
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d107      	bne.n	8001be2 <UART_SetConfig+0x86>
 8001bd2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <UART_SetConfig+0x234>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	e7e6      	b.n	8001bb0 <UART_SetConfig+0x54>
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <UART_SetConfig+0x224>)
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 80c2 	bne.w	8001d6e <UART_SetConfig+0x212>
 8001bea:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001bee:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001bf2:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001bf6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001bfa:	d02a      	beq.n	8001c52 <UART_SetConfig+0xf6>
 8001bfc:	d806      	bhi.n	8001c0c <UART_SetConfig+0xb0>
 8001bfe:	b315      	cbz	r5, 8001c46 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001c00:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c06:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001c08:	4610      	mov	r0, r2
 8001c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c0c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001c10:	d006      	beq.n	8001c20 <UART_SetConfig+0xc4>
 8001c12:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001c16:	d1f3      	bne.n	8001c00 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001c18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c1c:	2508      	movs	r5, #8
 8001c1e:	e001      	b.n	8001c24 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001c20:	485c      	ldr	r0, [pc, #368]	; (8001d94 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c22:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001c24:	6862      	ldr	r2, [r4, #4]
 8001c26:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c2a:	4283      	cmp	r3, r0
 8001c2c:	d8e8      	bhi.n	8001c00 <UART_SetConfig+0xa4>
 8001c2e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001c32:	d8e5      	bhi.n	8001c00 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001c34:	2d08      	cmp	r5, #8
 8001c36:	d838      	bhi.n	8001caa <UART_SetConfig+0x14e>
 8001c38:	e8df f005 	tbb	[pc, r5]
 8001c3c:	3726370f 	.word	0x3726370f
 8001c40:	3737372e 	.word	0x3737372e
 8001c44:	31          	.byte	0x31
 8001c45:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001c46:	f7ff f987 	bl	8000f58 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d1ea      	bne.n	8001c24 <UART_SetConfig+0xc8>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	e7d7      	b.n	8001c02 <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001c52:	f7fe fe49 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
        break;
 8001c56:	2504      	movs	r5, #4
 8001c58:	e7f7      	b.n	8001c4a <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c5a:	f7ff f97d 	bl	8000f58 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c5e:	6862      	ldr	r2, [r4, #4]
 8001c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c64:	0856      	lsrs	r6, r2, #1
 8001c66:	2700      	movs	r7, #0
 8001c68:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	4630      	mov	r0, r6
 8001c70:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c72:	f7fe faab 	bl	80001cc <__aeabi_uldivmod>
            break;
 8001c76:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <UART_SetConfig+0x23c>)
 8001c7a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d8be      	bhi.n	8001c00 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	60d8      	str	r0, [r3, #12]
 8001c86:	e7bc      	b.n	8001c02 <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001c88:	4844      	ldr	r0, [pc, #272]	; (8001d9c <UART_SetConfig+0x240>)
 8001c8a:	0855      	lsrs	r5, r2, #1
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c92:	f141 0100 	adc.w	r1, r1, #0
 8001c96:	e7ec      	b.n	8001c72 <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c98:	f7fe fe26 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
 8001c9c:	e7df      	b.n	8001c5e <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c9e:	0850      	lsrs	r0, r2, #1
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001ca8:	e7f3      	b.n	8001c92 <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8001caa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e7e3      	b.n	8001c78 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cb0:	f7ff f952 	bl	8000f58 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cb4:	6861      	ldr	r1, [r4, #4]
 8001cb6:	084a      	lsrs	r2, r1, #1
 8001cb8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001cbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cc2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cc4:	f1a3 0010 	sub.w	r0, r3, #16
 8001cc8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ccc:	4288      	cmp	r0, r1
 8001cce:	d897      	bhi.n	8001c00 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001cd0:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001cd4:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cd6:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60c3      	str	r3, [r0, #12]
 8001cde:	e790      	b.n	8001c02 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ce0:	f7ff f94c 	bl	8000f7c <HAL_RCC_GetPCLK2Freq>
 8001ce4:	e7e6      	b.n	8001cb4 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ce6:	6860      	ldr	r0, [r4, #4]
 8001ce8:	0843      	lsrs	r3, r0, #1
 8001cea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001cee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cf2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cf6:	e7e3      	b.n	8001cc0 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cf8:	f7fe fdf6 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
 8001cfc:	e7da      	b.n	8001cb4 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cfe:	6860      	ldr	r0, [r4, #4]
 8001d00:	0843      	lsrs	r3, r0, #1
 8001d02:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d06:	e7f4      	b.n	8001cf2 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8001d08:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e7da      	b.n	8001cc4 <UART_SetConfig+0x168>
    switch (clocksource)
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d830      	bhi.n	8001d74 <UART_SetConfig+0x218>
 8001d12:	e8df f003 	tbb	[pc, r3]
 8001d16:	1805      	.short	0x1805
 8001d18:	2f242f1b 	.word	0x2f242f1b
 8001d1c:	2f2f      	.short	0x2f2f
 8001d1e:	27          	.byte	0x27
 8001d1f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d20:	f7ff f91a 	bl	8000f58 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d30:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d32:	f1a3 0010 	sub.w	r0, r3, #16
 8001d36:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001d3a:	4288      	cmp	r0, r1
 8001d3c:	f63f af60 	bhi.w	8001c00 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001d40:	6821      	ldr	r1, [r4, #0]
 8001d42:	60cb      	str	r3, [r1, #12]
 8001d44:	e75d      	b.n	8001c02 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d46:	f7ff f919 	bl	8000f7c <HAL_RCC_GetPCLK2Freq>
 8001d4a:	e7eb      	b.n	8001d24 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d4c:	6860      	ldr	r0, [r4, #4]
 8001d4e:	0843      	lsrs	r3, r0, #1
 8001d50:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001d54:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d58:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d5c:	e7e7      	b.n	8001d2e <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d5e:	f7fe fdc3 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
 8001d62:	e7df      	b.n	8001d24 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d64:	6860      	ldr	r0, [r4, #4]
 8001d66:	0843      	lsrs	r3, r0, #1
 8001d68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d6c:	e7f4      	b.n	8001d58 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d72:	d0c9      	beq.n	8001d08 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 8001d74:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e7db      	b.n	8001d32 <UART_SetConfig+0x1d6>
 8001d7a:	bf00      	nop
 8001d7c:	efff69f3 	.word	0xefff69f3
 8001d80:	40008000 	.word	0x40008000
 8001d84:	40013800 	.word	0x40013800
 8001d88:	080026ac 	.word	0x080026ac
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	080026b0 	.word	0x080026b0
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	000ffcff 	.word	0x000ffcff
 8001d9c:	f4240000 	.word	0xf4240000

08001da0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001da0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001da2:	07da      	lsls	r2, r3, #31
{
 8001da4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001da6:	d506      	bpl.n	8001db6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001da8:	6801      	ldr	r1, [r0, #0]
 8001daa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001dac:	684a      	ldr	r2, [r1, #4]
 8001dae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001db2:	4322      	orrs	r2, r4
 8001db4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001db6:	079c      	lsls	r4, r3, #30
 8001db8:	d506      	bpl.n	8001dc8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dba:	6801      	ldr	r1, [r0, #0]
 8001dbc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001dbe:	684a      	ldr	r2, [r1, #4]
 8001dc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dc4:	4322      	orrs	r2, r4
 8001dc6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001dc8:	0759      	lsls	r1, r3, #29
 8001dca:	d506      	bpl.n	8001dda <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dcc:	6801      	ldr	r1, [r0, #0]
 8001dce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001dd0:	684a      	ldr	r2, [r1, #4]
 8001dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dd6:	4322      	orrs	r2, r4
 8001dd8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001dda:	071a      	lsls	r2, r3, #28
 8001ddc:	d506      	bpl.n	8001dec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dde:	6801      	ldr	r1, [r0, #0]
 8001de0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001de2:	684a      	ldr	r2, [r1, #4]
 8001de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de8:	4322      	orrs	r2, r4
 8001dea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001dec:	06dc      	lsls	r4, r3, #27
 8001dee:	d506      	bpl.n	8001dfe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001df0:	6801      	ldr	r1, [r0, #0]
 8001df2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001df4:	688a      	ldr	r2, [r1, #8]
 8001df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001dfe:	0699      	lsls	r1, r3, #26
 8001e00:	d506      	bpl.n	8001e10 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e02:	6801      	ldr	r1, [r0, #0]
 8001e04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001e06:	688a      	ldr	r2, [r1, #8]
 8001e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0c:	4322      	orrs	r2, r4
 8001e0e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e10:	065a      	lsls	r2, r3, #25
 8001e12:	d50f      	bpl.n	8001e34 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e14:	6801      	ldr	r1, [r0, #0]
 8001e16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e18:	684a      	ldr	r2, [r1, #4]
 8001e1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e1e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e26:	d105      	bne.n	8001e34 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e28:	684a      	ldr	r2, [r1, #4]
 8001e2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e2c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001e30:	4322      	orrs	r2, r4
 8001e32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	d506      	bpl.n	8001e46 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e38:	6802      	ldr	r2, [r0, #0]
 8001e3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e3c:	6853      	ldr	r3, [r2, #4]
 8001e3e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e42:	430b      	orrs	r3, r1
 8001e44:	6053      	str	r3, [r2, #4]
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <UART_WaitOnFlagUntilTimeout>:
{
 8001e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4c:	9d06      	ldr	r5, [sp, #24]
 8001e4e:	4604      	mov	r4, r0
 8001e50:	460f      	mov	r7, r1
 8001e52:	4616      	mov	r6, r2
 8001e54:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e56:	6821      	ldr	r1, [r4, #0]
 8001e58:	69ca      	ldr	r2, [r1, #28]
 8001e5a:	ea37 0302 	bics.w	r3, r7, r2
 8001e5e:	bf0c      	ite	eq
 8001e60:	2201      	moveq	r2, #1
 8001e62:	2200      	movne	r2, #0
 8001e64:	42b2      	cmp	r2, r6
 8001e66:	d002      	beq.n	8001e6e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001e68:	2000      	movs	r0, #0
}
 8001e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e6e:	1c6b      	adds	r3, r5, #1
 8001e70:	d0f2      	beq.n	8001e58 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e72:	b99d      	cbnz	r5, 8001e9c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001e86:	2320      	movs	r3, #32
 8001e88:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001e90:	2300      	movs	r3, #0
 8001e92:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001e96:	2003      	movs	r0, #3
 8001e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e9c:	f7fe fb4e 	bl	800053c <HAL_GetTick>
 8001ea0:	eba0 0008 	sub.w	r0, r0, r8
 8001ea4:	4285      	cmp	r5, r0
 8001ea6:	d2d6      	bcs.n	8001e56 <UART_WaitOnFlagUntilTimeout+0xe>
 8001ea8:	e7e4      	b.n	8001e74 <UART_WaitOnFlagUntilTimeout+0x2c>

08001eaa <HAL_UART_Transmit>:
{
 8001eaa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001eae:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001eb4:	2b20      	cmp	r3, #32
{
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460d      	mov	r5, r1
 8001eba:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebc:	d14a      	bne.n	8001f54 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d046      	beq.n	8001f50 <HAL_UART_Transmit+0xa6>
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d044      	beq.n	8001f50 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001ec6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d042      	beq.n	8001f54 <HAL_UART_Transmit+0xaa>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed8:	2321      	movs	r3, #33	; 0x21
 8001eda:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001ede:	f7fe fb2d 	bl	800053c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001ee2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001ee6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001ee8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001eec:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef0:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001ef2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef4:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001ef6:	b952      	cbnz	r2, 8001f0e <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff ffa4 	bl	8001e48 <UART_WaitOnFlagUntilTimeout>
 8001f00:	b958      	cbnz	r0, 8001f1a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001f02:	2320      	movs	r3, #32
 8001f04:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001f08:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001f0c:	e006      	b.n	8001f1c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff ff98 	bl	8001e48 <UART_WaitOnFlagUntilTimeout>
 8001f18:	b118      	cbz	r0, 8001f22 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001f1a:	2003      	movs	r0, #3
}
 8001f1c:	b002      	add	sp, #8
 8001f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f22:	68a3      	ldr	r3, [r4, #8]
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d10d      	bne.n	8001f48 <HAL_UART_Transmit+0x9e>
 8001f2c:	6923      	ldr	r3, [r4, #16]
 8001f2e:	b95b      	cbnz	r3, 8001f48 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001f30:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f38:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001f3a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001f46:	e7d1      	b.n	8001eec <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001f48:	782b      	ldrb	r3, [r5, #0]
 8001f4a:	8513      	strh	r3, [r2, #40]	; 0x28
 8001f4c:	3501      	adds	r5, #1
 8001f4e:	e7f4      	b.n	8001f3a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	e7e3      	b.n	8001f1c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001f54:	2002      	movs	r0, #2
 8001f56:	e7e1      	b.n	8001f1c <HAL_UART_Transmit+0x72>

08001f58 <UART_CheckIdleState>:
{
 8001f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f5a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001f60:	f7fe faec 	bl	800053c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001f6a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f6c:	d417      	bmi.n	8001f9e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	075b      	lsls	r3, r3, #29
 8001f74:	d50a      	bpl.n	8001f8c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	462b      	mov	r3, r5
 8001f80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f84:	4620      	mov	r0, r4
 8001f86:	f7ff ff5f 	bl	8001e48 <UART_WaitOnFlagUntilTimeout>
 8001f8a:	b9a0      	cbnz	r0, 8001fb6 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001f8c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001f8e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001f90:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001f94:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001f98:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001f9c:	e00c      	b.n	8001fb8 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4632      	mov	r2, r6
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff ff4b 	bl	8001e48 <UART_WaitOnFlagUntilTimeout>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d0db      	beq.n	8001f6e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001fb6:	2003      	movs	r0, #3
}
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd70      	pop	{r4, r5, r6, pc}

08001fbc <HAL_UART_Init>:
{
 8001fbc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	b360      	cbz	r0, 800201c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fca:	b91b      	cbnz	r3, 8001fd4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001fcc:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001fd0:	f000 fa6e 	bl	80024b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001fd4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fd6:	2324      	movs	r3, #36	; 0x24
 8001fd8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001fdc:	6813      	ldr	r3, [r2, #0]
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff fdb9 	bl	8001b5c <UART_SetConfig>
 8001fea:	2801      	cmp	r0, #1
 8001fec:	d016      	beq.n	800201c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ff0:	b113      	cbz	r3, 8001ff8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff fed4 	bl	8001da0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002000:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002008:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002010:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002012:	601a      	str	r2, [r3, #0]
}
 8002014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002018:	f7ff bf9e 	b.w	8001f58 <UART_CheckIdleState>
}
 800201c:	2001      	movs	r0, #1
 800201e:	bd10      	pop	{r4, pc}

08002020 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002020:	4770      	bx	lr
	...

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b530      	push	{r4, r5, lr}
 8002026:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002028:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	2244      	movs	r2, #68	; 0x44
 800202c:	2100      	movs	r1, #0
 800202e:	a806      	add	r0, sp, #24
 8002030:	f000 fb28 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	4622      	mov	r2, r4
 8002036:	2100      	movs	r1, #0
 8002038:	a801      	add	r0, sp, #4
 800203a:	f000 fb23 	bl	8002684 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203e:	2100      	movs	r1, #0
 8002040:	2254      	movs	r2, #84	; 0x54
 8002042:	a817      	add	r0, sp, #92	; 0x5c
 8002044:	f000 fb1e 	bl	8002684 <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002048:	f7fe fbc6 	bl	80007d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800204c:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <SystemClock_Config+0x94>)
 800204e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002052:	f023 0318 	bic.w	r3, r3, #24
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800205a:	2301      	movs	r3, #1
 800205c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800205e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002060:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002062:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002064:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002066:	2320      	movs	r3, #32
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002068:	2503      	movs	r5, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800206a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800206c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800206e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002070:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002072:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002074:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002076:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002078:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800207a:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800207c:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800207e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002080:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002082:	f7fe fc85 	bl	8000990 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002086:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002088:	4629      	mov	r1, r5
 800208a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002090:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002092:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002094:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002096:	f7fe fecd 	bl	8000e34 <HAL_RCC_ClockConfig>
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209a:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800209c:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800209e:	941f      	str	r4, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020a0:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a2:	f7ff f809 	bl	80010b8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020aa:	f7fe fba5 	bl	80007f8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020ae:	f7ff f947 	bl	8001340 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020b2:	b02d      	add	sp, #180	; 0xb4
 80020b4:	bd30      	pop	{r4, r5, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <main>:
{
 80020bc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80020c0:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 80020c2:	f7fe fa23 	bl	800050c <HAL_Init>
  SystemClock_Config();
 80020c6:	f7ff ffad 	bl	8002024 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	2214      	movs	r2, #20
 80020cc:	2100      	movs	r1, #0
 80020ce:	a80d      	add	r0, sp, #52	; 0x34
 80020d0:	f000 fad8 	bl	8002684 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <main+0x29c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020d6:	48a1      	ldr	r0, [pc, #644]	; (800235c <main+0x2a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  huart2.Instance = USART2;
 80020da:	4ea1      	ldr	r6, [pc, #644]	; (8002360 <main+0x2a4>)
  htim2.Instance = TIM2;
 80020dc:	4fa1      	ldr	r7, [pc, #644]	; (8002364 <main+0x2a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	f042 0204 	orr.w	r2, r2, #4
 80020e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e6:	f002 0204 	and.w	r2, r2, #4
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80020f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f8:	f002 0201 	and.w	r2, r2, #1
 80020fc:	9201      	str	r2, [sp, #4]
 80020fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002102:	f042 0202 	orr.w	r2, r2, #2
 8002106:	64da      	str	r2, [r3, #76]	; 0x4c
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002112:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002116:	f7fe fb59 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800211a:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800211e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = LD3_Pin;
 8002120:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002122:	488e      	ldr	r0, [pc, #568]	; (800235c <main+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800212c:	f7fe fa9a 	bl	8000664 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002130:	4a8d      	ldr	r2, [pc, #564]	; (8002368 <main+0x2ac>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	60b4      	str	r4, [r6, #8]
  huart2.Init.BaudRate = 115200;
 8002134:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002138:	250c      	movs	r5, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213a:	4630      	mov	r0, r6
  huart2.Init.BaudRate = 115200;
 800213c:	e886 000c 	stmia.w	r6, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002140:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002142:	6134      	str	r4, [r6, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002144:	6175      	str	r5, [r6, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214a:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214c:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800214e:	f7ff ff35 	bl	8001fbc <HAL_UART_Init>
  huart1.Instance = USART1;
 8002152:	4886      	ldr	r0, [pc, #536]	; (800236c <main+0x2b0>)
  huart1.Init.BaudRate = 9600;
 8002154:	4986      	ldr	r1, [pc, #536]	; (8002370 <main+0x2b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8002158:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800215c:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002160:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002162:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002164:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216a:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800216e:	f7ff ff25 	bl	8001fbc <HAL_UART_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002172:	4621      	mov	r1, r4
 8002174:	221c      	movs	r2, #28
 8002176:	a806      	add	r0, sp, #24
  htim1.Instance = TIM1;
 8002178:	4d7e      	ldr	r5, [pc, #504]	; (8002374 <main+0x2b8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217a:	9403      	str	r4, [sp, #12]
 800217c:	9404      	str	r4, [sp, #16]
 800217e:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002180:	f000 fa80 	bl	8002684 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002184:	222c      	movs	r2, #44	; 0x2c
 8002186:	4621      	mov	r1, r4
 8002188:	a80d      	add	r0, sp, #52	; 0x34
 800218a:	f000 fa7b 	bl	8002684 <memset>
  htim1.Init.Prescaler = 128-1;
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <main+0x2bc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 128-1;
 8002192:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
  htim1.Init.Period = 10000-1;
 8002196:	f242 7a0f 	movw	sl, #9999	; 0x270f
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800219a:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 128-1;
 800219c:	e885 0808 	stmia.w	r5, {r3, fp}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a0:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80021a2:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 10000-1;
 80021a6:	f8c5 a00c 	str.w	sl, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021aa:	f7ff fa03 	bl	80015b4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021ae:	a903      	add	r1, sp, #12
 80021b0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021b4:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	9405      	str	r4, [sp, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b8:	f04f 0960 	mov.w	r9, #96	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021bc:	f7ff fb0c 	bl	80017d8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 760;
 80021c0:	f44f 783e 	mov.w	r8, #760	; 0x2f8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c4:	4622      	mov	r2, r4
 80021c6:	a906      	add	r1, sp, #24
 80021c8:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ca:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021cc:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021d0:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021d2:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d4:	f8cd 9018 	str.w	r9, [sp, #24]
  sConfigOC.Pulse = 760;
 80021d8:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021dc:	f7ff fa3c 	bl	8001658 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021e4:	a90d      	add	r1, sp, #52	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021e6:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021e8:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f0:	940d      	str	r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f2:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f4:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 80021f6:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f8:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021fa:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021fc:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021fe:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002200:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002202:	f7ff fb11 	bl	8001828 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002206:	4628      	mov	r0, r5
 8002208:	f000 f91a 	bl	8002440 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220c:	221c      	movs	r2, #28
 800220e:	4621      	mov	r1, r4
 8002210:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002212:	9406      	str	r4, [sp, #24]
 8002214:	9407      	str	r4, [sp, #28]
 8002216:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002218:	f000 fa34 	bl	8002684 <memset>
  htim2.Instance = TIM2;
 800221c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002220:	4638      	mov	r0, r7
  htim2.Init.Prescaler = 128-1;
 8002222:	e887 0808 	stmia.w	r7, {r3, fp}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	60bc      	str	r4, [r7, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	61bc      	str	r4, [r7, #24]
  htim2.Init.Period = 10000-1;
 800222c:	f8c7 a00c 	str.w	sl, [r7, #12]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002230:	f7ff f9c0 	bl	80015b4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002234:	a906      	add	r1, sp, #24
 8002236:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800223c:	f7ff facc 	bl	80017d8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002240:	4622      	mov	r2, r4
 8002242:	a90d      	add	r1, sp, #52	; 0x34
 8002244:	4638      	mov	r0, r7
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002246:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002248:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfigOC.Pulse = 760;
 800224e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002252:	f7ff fa01 	bl	8001658 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8002256:	4638      	mov	r0, r7
 8002258:	f000 f8f2 	bl	8002440 <HAL_TIM_MspPostInit>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800225c:	4622      	mov	r2, r4
 800225e:	4621      	mov	r1, r4
 8002260:	2025      	movs	r0, #37	; 0x25
 8002262:	f7fe f983 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002266:	2025      	movs	r0, #37	; 0x25
 8002268:	f7fe f9b4 	bl	80005d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800226c:	4622      	mov	r2, r4
 800226e:	4621      	mov	r1, r4
 8002270:	2026      	movs	r0, #38	; 0x26
 8002272:	f7fe f97b 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002276:	2026      	movs	r0, #38	; 0x26
 8002278:	f7fe f9ac 	bl	80005d4 <HAL_NVIC_EnableIRQ>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800227c:	4621      	mov	r1, r4
 800227e:	4628      	mov	r0, r5
 8002280:	f7ff fa7e 	bl	8001780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002284:	4621      	mov	r1, r4
 8002286:	4638      	mov	r0, r7
 8002288:	f7ff fa7a 	bl	8001780 <HAL_TIM_PWM_Start>
	  if(rcvFlag)
 800228c:	4d3b      	ldr	r5, [pc, #236]	; (800237c <main+0x2c0>)
		a = (value[0]-48)*100;
 800228e:	4c3c      	ldr	r4, [pc, #240]	; (8002380 <main+0x2c4>)
	  if(rcvFlag)
 8002290:	782b      	ldrb	r3, [r5, #0]
 8002292:	b35b      	cbz	r3, 80022ec <main+0x230>
		b = (value[1]-48)*10;
 8002294:	7861      	ldrb	r1, [r4, #1]
		a = (value[0]-48)*100;
 8002296:	7822      	ldrb	r2, [r4, #0]
		  input_speed = input & 0x7;
 8002298:	4f3a      	ldr	r7, [pc, #232]	; (8002384 <main+0x2c8>)
		  input_steer = input >> 3;
 800229a:	f8df e100 	ldr.w	lr, [pc, #256]	; 800239c <main+0x2e0>
 800229e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80023a0 <main+0x2e4>
		b = (value[1]-48)*10;
 80022a2:	3930      	subs	r1, #48	; 0x30
 80022a4:	230a      	movs	r3, #10
 80022a6:	4359      	muls	r1, r3
	return a+b+c;
 80022a8:	2064      	movs	r0, #100	; 0x64
		a = (value[0]-48)*100;
 80022aa:	3a30      	subs	r2, #48	; 0x30
	return a+b+c;
 80022ac:	fb00 1202 	mla	r2, r0, r2, r1
		c = value[2] - 48;
 80022b0:	78a1      	ldrb	r1, [r4, #2]
 80022b2:	3930      	subs	r1, #48	; 0x30
	return a+b+c;
 80022b4:	440a      	add	r2, r1
		  input = ascii2int(rxBuffer);
 80022b6:	4934      	ldr	r1, [pc, #208]	; (8002388 <main+0x2cc>)
		  input_speed = input & 0x7;
 80022b8:	f002 0007 	and.w	r0, r2, #7
		  input = ascii2int(rxBuffer);
 80022bc:	600a      	str	r2, [r1, #0]
		  if(input<0)
 80022be:	2a00      	cmp	r2, #0
		  input_steer = input >> 3;
 80022c0:	ea4f 01e2 	mov.w	r1, r2, asr #3
		  input_speed = input & 0x7;
 80022c4:	6038      	str	r0, [r7, #0]
		  input_steer = input >> 3;
 80022c6:	f8ce 1000 	str.w	r1, [lr]
 80022ca:	4f30      	ldr	r7, [pc, #192]	; (800238c <main+0x2d0>)
		  if(input<0)
 80022cc:	da14      	bge.n	80022f8 <main+0x23c>
			  HAL_UART_Transmit(&huart2, err_neg, sizeof(err_neg), 10);
 80022ce:	4930      	ldr	r1, [pc, #192]	; (8002390 <main+0x2d4>)
 80022d0:	2228      	movs	r2, #40	; 0x28
			  HAL_UART_Transmit(&huart2, err_speed, sizeof(err_speed), 10);
 80022d2:	4630      	mov	r0, r6
 80022d4:	f7ff fde9 	bl	8001eaa <HAL_UART_Transmit>
		  TIM1->CCR1 = input_pwm1;
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <main+0x2bc>)
 80022da:	f8d8 2000 	ldr.w	r2, [r8]
 80022de:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM2->CCR1 = input_pwm2;
 80022e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
		  rcvFlag = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	702b      	strb	r3, [r5, #0]
	  HAL_UART_Receive_IT(&huart2, rxBuffer, 3);
 80022ec:	2203      	movs	r2, #3
 80022ee:	4621      	mov	r1, r4
 80022f0:	4630      	mov	r0, r6
 80022f2:	f7ff fae7 	bl	80018c4 <HAL_UART_Receive_IT>
	  if(rcvFlag)
 80022f6:	e7cb      	b.n	8002290 <main+0x1d4>
		  else if(input_steer>31)
 80022f8:	291f      	cmp	r1, #31
 80022fa:	dd02      	ble.n	8002302 <main+0x246>
			  HAL_UART_Transmit(&huart2, err_steer, sizeof(err_steer), 10);
 80022fc:	2228      	movs	r2, #40	; 0x28
 80022fe:	4925      	ldr	r1, [pc, #148]	; (8002394 <main+0x2d8>)
 8002300:	e7e7      	b.n	80022d2 <main+0x216>
		  else if(input_speed>4)
 8002302:	2804      	cmp	r0, #4
 8002304:	dd02      	ble.n	800230c <main+0x250>
			  HAL_UART_Transmit(&huart2, err_speed, sizeof(err_speed), 10);
 8002306:	2228      	movs	r2, #40	; 0x28
 8002308:	4923      	ldr	r1, [pc, #140]	; (8002398 <main+0x2dc>)
 800230a:	e7e2      	b.n	80022d2 <main+0x216>
			  switch(input_steer>>4)
 800230c:	11d2      	asrs	r2, r2, #7
 800230e:	2a01      	cmp	r2, #1
			  		  input_steer = input_steer & 0xf;
 8002310:	bf09      	itett	eq
 8002312:	f001 010f 	andeq.w	r1, r1, #15
			  		  input_pwm1 = 760-(220/15)*input_steer;
 8002316:	f06f 030d 	mvnne.w	r3, #13
			  		  input_pwm1 = 760+(220/15)*input_steer;
 800231a:	230e      	moveq	r3, #14
			  		  input_steer = input_steer & 0xf;
 800231c:	f8ce 1000 	streq.w	r1, [lr]
			  		  input_pwm1 = 760+(220/15)*input_steer;
 8002320:	4359      	muls	r1, r3
 8002322:	f501 713e 	add.w	r1, r1, #760	; 0x2f8
			  switch(input_speed)
 8002326:	3801      	subs	r0, #1
			  		  input_pwm1 = 760+(220/15)*input_steer;
 8002328:	f8c8 1000 	str.w	r1, [r8]
			  switch(input_speed)
 800232c:	2803      	cmp	r0, #3
 800232e:	d803      	bhi.n	8002338 <main+0x27c>
 8002330:	e8df f000 	tbb	[pc, r0]
 8002334:	0f0c0906 	.word	0x0f0c0906
			  		  input_pwm2 = 760;
 8002338:	f44f 733e 	mov.w	r3, #760	; 0x2f8
			  		  input_pwm2 = 690;
 800233c:	603b      	str	r3, [r7, #0]
			  		  break;
 800233e:	e7cb      	b.n	80022d8 <main+0x21c>
			  		  input_pwm2 = 820;
 8002340:	f44f 734d 	mov.w	r3, #820	; 0x334
 8002344:	e7fa      	b.n	800233c <main+0x280>
			  		  input_pwm2 = 825;
 8002346:	f240 3339 	movw	r3, #825	; 0x339
 800234a:	e7f7      	b.n	800233c <main+0x280>
			  		  input_pwm2 = 830;
 800234c:	f240 333e 	movw	r3, #830	; 0x33e
 8002350:	e7f4      	b.n	800233c <main+0x280>
			  		  input_pwm2 = 690;
 8002352:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002356:	e7f1      	b.n	800233c <main+0x280>
 8002358:	40021000 	.word	0x40021000
 800235c:	48000400 	.word	0x48000400
 8002360:	200001ac 	.word	0x200001ac
 8002364:	2000016c 	.word	0x2000016c
 8002368:	40004400 	.word	0x40004400
 800236c:	200000b0 	.word	0x200000b0
 8002370:	40013800 	.word	0x40013800
 8002374:	20000128 	.word	0x20000128
 8002378:	40012c00 	.word	0x40012c00
 800237c:	20000098 	.word	0x20000098
 8002380:	20000099 	.word	0x20000099
 8002384:	200000ac 	.word	0x200000ac
 8002388:	200000a4 	.word	0x200000a4
 800238c:	20000168 	.word	0x20000168
 8002390:	20000000 	.word	0x20000000
 8002394:	20000050 	.word	0x20000050
 8002398:	20000028 	.word	0x20000028
 800239c:	20000224 	.word	0x20000224
 80023a0:	200000a8 	.word	0x200000a8

080023a4 <HAL_UART_RxCpltCallback>:
	rcvFlag=1;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_UART_RxCpltCallback+0x18>)
	rxBuffer[3] = 10;
 80023a6:	4906      	ldr	r1, [pc, #24]	; (80023c0 <HAL_UART_RxCpltCallback+0x1c>)
	HAL_UART_Transmit(&huart2, rxBuffer, 5, 10);
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <HAL_UART_RxCpltCallback+0x20>)
	rcvFlag=1;
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
	rxBuffer[4] = 13;
 80023ae:	220d      	movs	r2, #13
	rxBuffer[3] = 10;
 80023b0:	230a      	movs	r3, #10
	rxBuffer[4] = 13;
 80023b2:	710a      	strb	r2, [r1, #4]
	HAL_UART_Transmit(&huart2, rxBuffer, 5, 10);
 80023b4:	2205      	movs	r2, #5
	rxBuffer[3] = 10;
 80023b6:	70cb      	strb	r3, [r1, #3]
	HAL_UART_Transmit(&huart2, rxBuffer, 5, 10);
 80023b8:	f7ff bd77 	b.w	8001eaa <HAL_UART_Transmit>
 80023bc:	20000098 	.word	0x20000098
 80023c0:	20000099 	.word	0x20000099
 80023c4:	200001ac 	.word	0x200001ac

080023c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_MspInit+0x2c>)
 80023ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	661a      	str	r2, [r3, #96]	; 0x60
 80023d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80023d4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	f002 0201 	and.w	r2, r2, #1
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f0:	b002      	add	sp, #8
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80023f8:	6803      	ldr	r3, [r0, #0]
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_TIM_PWM_MspInit+0x40>)
 80023fc:	4293      	cmp	r3, r2
{
 80023fe:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8002400:	d10b      	bne.n	800241a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_TIM_PWM_MspInit+0x44>)
 8002404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240a:	661a      	str	r2, [r3, #96]	; 0x60
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002416:	b002      	add	sp, #8
 8002418:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241e:	d1fa      	bne.n	8002416 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002420:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	659a      	str	r2, [r3, #88]	; 0x58
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	9b01      	ldr	r3, [sp, #4]
}
 8002436:	e7ee      	b.n	8002416 <HAL_TIM_PWM_MspInit+0x1e>
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002440:	b510      	push	{r4, lr}
 8002442:	4604      	mov	r4, r0
 8002444:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002446:	2214      	movs	r2, #20
 8002448:	2100      	movs	r1, #0
 800244a:	a803      	add	r0, sp, #12
 800244c:	f000 f91a 	bl	8002684 <memset>
  if(htim->Instance==TIM1)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_TIM_MspPostInit+0x68>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d117      	bne.n	8002488 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_TIM_MspPostInit+0x6c>)
 800245a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	64da      	str	r2, [r3, #76]	; 0x4c
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800246c:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002470:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002478:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800247e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f7fe f8f0 	bl	8000664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002484:	b008      	add	sp, #32
 8002486:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248c:	d1fa      	bne.n	8002484 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	64da      	str	r2, [r3, #76]	; 0x4c
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e7e3      	b.n	8002470 <HAL_TIM_MspPostInit+0x30>
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	2214      	movs	r2, #20
{
 80024b4:	b08b      	sub	sp, #44	; 0x2c
 80024b6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	2100      	movs	r1, #0
 80024ba:	eb0d 0002 	add.w	r0, sp, r2
 80024be:	f000 f8e1 	bl	8002684 <memset>
  if(huart->Instance==USART1)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	4a28      	ldr	r2, [pc, #160]	; (8002568 <HAL_UART_MspInit+0xb8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d122      	bne.n	8002510 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_UART_MspInit+0xbc>)
 80024cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024d2:	661a      	str	r2, [r3, #96]	; 0x60
 80024d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024da:	9201      	str	r2, [sp, #4]
 80024dc:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024fe:	2307      	movs	r3, #7
 8002500:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002502:	a905      	add	r1, sp, #20
 8002504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002508:	f7fe f8ac 	bl	8000664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800250c:	b00b      	add	sp, #44	; 0x2c
 800250e:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_UART_MspInit+0xc0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d1fa      	bne.n	800250c <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_UART_MspInit+0xbc>)
 8002518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800251a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800251e:	659a      	str	r2, [r3, #88]	; 0x58
 8002520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002522:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002526:	9203      	str	r2, [sp, #12]
 8002528:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	64da      	str	r2, [r3, #76]	; 0x4c
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	9304      	str	r3, [sp, #16]
 800253a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800253c:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002540:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002544:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002546:	a905      	add	r1, sp, #20
 8002548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002552:	f7fe f887 	bl	8000664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800255a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002564:	9409      	str	r4, [sp, #36]	; 0x24
 8002566:	e7cc      	b.n	8002502 <HAL_UART_MspInit+0x52>
 8002568:	40013800 	.word	0x40013800
 800256c:	40021000 	.word	0x40021000
 8002570:	40004400 	.word	0x40004400

08002574 <NMI_Handler>:
 8002574:	4770      	bx	lr

08002576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002576:	e7fe      	b.n	8002576 <HardFault_Handler>

08002578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002578:	e7fe      	b.n	8002578 <MemManage_Handler>

0800257a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257a:	e7fe      	b.n	800257a <BusFault_Handler>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler>

0800257e <SVC_Handler>:
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:
 8002580:	4770      	bx	lr

08002582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002584:	f7fd bfd2 	b.w	800052c <HAL_IncTick>

08002588 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002588:	4801      	ldr	r0, [pc, #4]	; (8002590 <USART1_IRQHandler+0x8>)
 800258a:	f7ff ba47 	b.w	8001a1c <HAL_UART_IRQHandler>
 800258e:	bf00      	nop
 8002590:	200000b0 	.word	0x200000b0

08002594 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002594:	4801      	ldr	r0, [pc, #4]	; (800259c <USART2_IRQHandler+0x8>)
 8002596:	f7ff ba41 	b.w	8001a1c <HAL_UART_IRQHandler>
 800259a:	bf00      	nop
 800259c:	200001ac 	.word	0x200001ac

080025a0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	490f      	ldr	r1, [pc, #60]	; (80025e0 <SystemInit+0x40>)
 80025a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <SystemInit+0x44>)
 80025b0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025b2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80025ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80025c2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80025c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025d6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025dc:	608b      	str	r3, [r1, #8]
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00
 80025e4:	40021000 	.word	0x40021000

080025e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002620 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025ee:	e003      	b.n	80025f8 <LoopCopyDataInit>

080025f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025f6:	3104      	adds	r1, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025f8:	480b      	ldr	r0, [pc, #44]	; (8002628 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <LoopForever+0xe>)
	adds	r2, r0, r1
 80025fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002600:	d3f6      	bcc.n	80025f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002604:	e002      	b.n	800260c <LoopFillZerobss>

08002606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002606:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002608:	f842 3b04 	str.w	r3, [r2], #4

0800260c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <LoopForever+0x16>)
	cmp	r2, r3
 800260e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002610:	d3f9      	bcc.n	8002606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002612:	f7ff ffc5 	bl	80025a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002616:	f000 f811 	bl	800263c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261a:	f7ff fd4f 	bl	80020bc <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002620:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002624:	08002718 	.word	0x08002718
	ldr	r0, =_sdata
 8002628:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800262c:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8002630:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8002634:	20000228 	.word	0x20000228

08002638 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_IRQHandler>
	...

0800263c <__libc_init_array>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	4e0d      	ldr	r6, [pc, #52]	; (8002674 <__libc_init_array+0x38>)
 8002640:	4c0d      	ldr	r4, [pc, #52]	; (8002678 <__libc_init_array+0x3c>)
 8002642:	1ba4      	subs	r4, r4, r6
 8002644:	10a4      	asrs	r4, r4, #2
 8002646:	2500      	movs	r5, #0
 8002648:	42a5      	cmp	r5, r4
 800264a:	d109      	bne.n	8002660 <__libc_init_array+0x24>
 800264c:	4e0b      	ldr	r6, [pc, #44]	; (800267c <__libc_init_array+0x40>)
 800264e:	4c0c      	ldr	r4, [pc, #48]	; (8002680 <__libc_init_array+0x44>)
 8002650:	f000 f820 	bl	8002694 <_init>
 8002654:	1ba4      	subs	r4, r4, r6
 8002656:	10a4      	asrs	r4, r4, #2
 8002658:	2500      	movs	r5, #0
 800265a:	42a5      	cmp	r5, r4
 800265c:	d105      	bne.n	800266a <__libc_init_array+0x2e>
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002664:	4798      	blx	r3
 8002666:	3501      	adds	r5, #1
 8002668:	e7ee      	b.n	8002648 <__libc_init_array+0xc>
 800266a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266e:	4798      	blx	r3
 8002670:	3501      	adds	r5, #1
 8002672:	e7f2      	b.n	800265a <__libc_init_array+0x1e>
 8002674:	08002710 	.word	0x08002710
 8002678:	08002710 	.word	0x08002710
 800267c:	08002710 	.word	0x08002710
 8002680:	08002714 	.word	0x08002714

08002684 <memset>:
 8002684:	4402      	add	r2, r0
 8002686:	4603      	mov	r3, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
